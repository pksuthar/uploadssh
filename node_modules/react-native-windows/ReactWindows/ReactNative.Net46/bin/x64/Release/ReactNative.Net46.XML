<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ReactNative.Net46</name>
    </assembly>
    <members>
        <member name="T:ReactNative.Bridge.CompiledReactDelegateFactory">
            <summary>
            A delegate factory that will compile a delegate to call the native method.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.CompiledReactDelegateFactory.Instance">
            <summary>
            The <see cref="T:ReactNative.Bridge.CompiledReactDelegateFactory"/> instance.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.CompiledReactDelegateFactory.Create(ReactNative.Bridge.INativeModule,System.Reflection.MethodInfo)">
            <summary>
            Create an invocation delegate from the given method.
            </summary>
            <param name="module">The native module instance.</param>
            <param name="method">The method.</param>
            <returns>The invocation delegate.</returns>
        </member>
        <member name="T:ReactNative.Bridge.IAsyncCancelable">
            <summary>
            Asynchronous disposable resource with disposal state tracking.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.IAsyncCancelable.IsDisposed">
            <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
        </member>
        <member name="T:ReactNative.Bridge.IAsyncDisposable">
            <summary>
            A resource that can be disposed asynchronously.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.IAsyncDisposable.DisposeAsync">
            <summary>
            Asynchronously disposes the instance.
            </summary>
            <returns>A task to await dispose operation.</returns>
        </member>
        <member name="T:ReactNative.Bridge.ICallback">
            <summary>
            Interface that represents a JavaScript callback function that can be
            passed to a native module as a method parameter.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.ICallback.Invoke(System.Object[])">
            <summary>
            Invokes the callback.
            </summary>
            <param name="arguments">The callback arguments.</param>
        </member>
        <member name="T:ReactNative.Bridge.IInvocationHandler">
            <summary>
            An interface for invoking methods specified by name.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.IInvocationHandler.Invoke(System.String,System.Object[])">
            <summary>
            Invoke the specified method.
            </summary>
            <param name="name">The name of the method.</param>
            <param name="args">The arguments for the method.</param>
        </member>
        <member name="T:ReactNative.Bridge.IJavaScriptExecutor">
            <summary>
            Interface for making JavaScript calls from native code.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.IJavaScriptExecutor.CallFunctionReturnFlushedQueue(System.String,System.String,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Call the JavaScript method from the given module.
            </summary>
            <param name="moduleName">The module name.</param>
            <param name="methodName">The method name.</param>
            <param name="arguments">The arguments.</param>
            <returns>The flushed queue of native operations.</returns>
        </member>
        <member name="M:ReactNative.Bridge.IJavaScriptExecutor.InvokeCallbackAndReturnFlushedQueue(System.Int32,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Invoke the JavaScript callback.
            </summary>
            <param name="callbackId">The callback identifier.</param>
            <param name="arguments">The arguments.</param>
            <returns>The flushed queue of native operations.</returns>
        </member>
        <member name="M:ReactNative.Bridge.IJavaScriptExecutor.FlushedQueue">
            <summary>
            Invoke the React 'flushedQueue' function.
            </summary>
            <returns>The flushed queue of native operations.</returns>
        </member>
        <member name="M:ReactNative.Bridge.IJavaScriptExecutor.SetGlobalVariable(System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Sets a global variable in the JavaScript runtime.
            </summary>
            <param name="propertyName">The global variable name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ReactNative.Bridge.IJavaScriptExecutor.RunScript(System.String,System.String)">
            <summary>
            Runs the given script.
            </summary>
            <param name="script">The script.</param>
            <param name="sourceUrl">The source URL.</param>
        </member>
        <member name="T:ReactNative.Bridge.IJavaScriptModule">
            <summary>
            An interface for JavaScript modules.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.IJavaScriptModule.InvocationHandler">
            <summary>
            The invocation handler.
            </summary>
        </member>
        <member name="T:ReactNative.Bridge.ILifecycleEventListener">
            <summary>
            Listener for application life cycle events.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.ILifecycleEventListener.OnSuspend">
            <summary>
            Called when the host receives the suspend event.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.ILifecycleEventListener.OnResume">
            <summary>
            Called when the host receives the resume event.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.ILifecycleEventListener.OnDestroy">
            <summary>
            Called when the host is shutting down.
            </summary>
        </member>
        <member name="T:ReactNative.Bridge.INativeMethod">
            <summary>
            An interface representing native methods.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.INativeMethod.Type">
            <summary>
            The type of method.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.INativeMethod.Invoke(ReactNative.Bridge.IReactInstance,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Invoke the native method.
            </summary>
            <param name="reactInstance">The React instance.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="T:ReactNative.Bridge.INativeModule">
            <summary>
            A native module whose API can be provided to JavaScript React
            instances. 
            </summary>
            <remarks>
            <see cref="T:ReactNative.Bridge.INativeModule"/>s whose implementation is written in C#
            should extend <see cref="T:ReactNative.Bridge.NativeModuleBase"/> or
            <see cref="T:ReactNative.Bridge.ReactContextNativeModuleBase"/>.
            </remarks>
        </member>
        <member name="P:ReactNative.Bridge.INativeModule.CanOverrideExistingModule">
            <summary>
            Return true if you intend to override some other native module that
            was registered, e.g., as part of a different package (such as the
            core one). Trying to override without returning true from this 
            method is considered an error and will throw an exception during
            initialization. By default, all modules return false.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.INativeModule.Constants">
            <summary>
            The constants exported by this module.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.INativeModule.Methods">
            <summary>
            The methods callabke from JavaScript on this module.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.INativeModule.Name">
            <summary>
            The name of the module.
            </summary>
            <remarks>
            This will be the name used to <code>require()</code> this module
            from JavaScript.
            </remarks>
        </member>
        <member name="M:ReactNative.Bridge.INativeModule.Initialize">
            <summary>
            Called after the creation of a <see cref="T:ReactNative.Bridge.IReactInstance"/>, in
            order to initialize native modules that require the React or
            JavaScript modules.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.INativeModule.OnReactInstanceDispose">
            <summary>
            Called before a <see cref="T:ReactNative.Bridge.IReactInstance"/> is disposed.
            </summary>
        </member>
        <member name="T:ReactNative.Bridge.IOnBatchCompleteListener">
            <summary>
            Interface that will be notified when a batch of JavaScript to native
            calls has finished.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.IOnBatchCompleteListener.OnBatchComplete">
            <summary>
            Invoked when a batch of JavaScript to native calls has finished.
            </summary>
        </member>
        <member name="T:ReactNative.Bridge.IPromise">
            <summary>
            Interface that represents a JavaScript Promise which can be passed to 
            the native module as a method parameter.
            </summary>
            <remarks>
            Methods annotated with <see cref="T:ReactNative.Bridge.ReactMethodAttribute"/> that use 
            <see cref="T:ReactNative.Bridge.IPromise"/> as type of the last parameter will be marked as
            "remoteAsync" and will return a promise when invoked from JavaScript.
            </remarks>
        </member>
        <member name="M:ReactNative.Bridge.IPromise.Resolve(System.Object)">
            <summary>
            Resolve the promise with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ReactNative.Bridge.IPromise.Reject(System.String,System.String)">
            <summary>
            Report an error which wasn't caused by an exception.
            </summary>
            <param name="code">The error code.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:ReactNative.Bridge.IPromise.Reject(System.String,System.Exception)">
            <summary>
            Report an exception.
            </summary>
            <param name="code">The error code.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ReactNative.Bridge.IPromise.Reject(System.String,System.String,System.Exception)">
            <summary>
            Report an exception with a custom error message.
            </summary>
            <param name="code">The error code.</param>
            <param name="message">The error message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ReactNative.Bridge.IPromise.Reject(System.String)">
            <summary>
            Report an error which wasn't caused by an exception.
            </summary>
            <param name="message">The error message.</param>
            <remarks>
            Using this method will pass the error code "EUNSPECIFIED".
            </remarks>
        </member>
        <member name="M:ReactNative.Bridge.IPromise.Reject(System.Exception)">
            <summary>
            Reject the promise with the given exception.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:ReactNative.Bridge.IReactBridge">
            <summary>
            Interface to the JavaScript execution environment and means of
            transport for messages between JavaScript and the native environment.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.IReactBridge.CallFunction(System.String,System.String,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Calls a JavaScript function.
            </summary>
            <param name="moduleName">The module ID.</param>
            <param name="method">The method ID.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ReactNative.Bridge.IReactBridge.InvokeCallback(System.Int32,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Invokes a JavaScript callback.
            </summary>
            <param name="callbackId">The callback identifier.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ReactNative.Bridge.IReactBridge.SetGlobalVariable(System.String,System.String)">
            <summary>
            Sets a global JavaScript variable.
            </summary>
            <param name="propertyName">The property name.</param>
            <param name="jsonEncodedArgument">The JSON-encoded value.</param>
        </member>
        <member name="M:ReactNative.Bridge.IReactBridge.RunScript(System.String,System.String)">
            <summary>
            Evaluates JavaScript.
            </summary>
            <param name="script">The script.</param>
            <param name="sourceUrl">The source URL.</param>
        </member>
        <member name="T:ReactNative.Bridge.IReactCallback">
            <summary>
            Interface that represents a native callback that can be invoked from
            JavaScript.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.IReactCallback.Invoke(System.Int32,System.Int32,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Invoke the native callback.
            </summary>
            <param name="moduleId">The module ID.</param>
            <param name="methodId">The method ID.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:ReactNative.Bridge.IReactCallback.OnBatchComplete">
            <summary>
            Signals that a batch of operations is complete.
            </summary>
        </member>
        <member name="T:ReactNative.Bridge.IReactDelegateFactory">
            <summary>
            Factory interface for manufacturing method invocation delegates.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.IReactDelegateFactory.GetMethodType(System.Reflection.MethodInfo)">
            <summary>
            Extracts the native method type from the method.
            </summary>
            <param name="method">The method.</param>
            <returns>The native method type.</returns>
        </member>
        <member name="M:ReactNative.Bridge.IReactDelegateFactory.Create(ReactNative.Bridge.INativeModule,System.Reflection.MethodInfo)">
            <summary>
            Create an invocation delegate from the given method.
            </summary>
            <param name="nativeModule">The native module instance.</param>
            <param name="method">The method.</param>
            <returns>The invocation delegate.</returns>
        </member>
        <member name="M:ReactNative.Bridge.IReactDelegateFactory.Validate(System.Reflection.MethodInfo)">
            <summary>
            Check that the method is valid for <see cref="T:ReactNative.Bridge.ReactMethodAttribute"/>.
            </summary>
            <param name="method">The method.</param>
        </member>
        <member name="T:ReactNative.Bridge.IReactInstance">
            <summary>
            An abstraction for the asynchronous JavaScript bridge. This provides an
            environment allowing the invocation of JavaScript methods and lets a
            set of native APIs be invokable from JavaScript as well.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.IReactInstance.NativeModules">
            <summary>
            Enumerates the available native modules.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.IReactInstance.QueueConfiguration">
            <summary>
            The React queue configuration.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.IReactInstance.Initialize">
            <summary>
            Initializes the instance.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.IReactInstance.InvokeFunction(System.String,System.String,Newtonsoft.Json.Linq.JArray,System.String)">
            <summary>
            Invokes a JavaScript function.
            </summary>
            <param name="moduleName">The module name.</param>
            <param name="method">The method ID.</param>
            <param name="arguments">The arguments.</param>
            <param name="tracingName">The tracing name.</param>
        </member>
        <member name="M:ReactNative.Bridge.IReactInstance.InvokeCallback(System.Int32,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Invokes a JavaScript callback.
            </summary>
            <param name="callbackId">The callback ID.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ReactNative.Bridge.IReactInstance.GetJavaScriptModule``1">
            <summary>
            Gets a JavaScript module instance.
            </summary>
            <typeparam name="T">Type of JavaScript module.</typeparam>
            <returns>The JavaScript module instance.</returns>
        </member>
        <member name="M:ReactNative.Bridge.IReactInstance.GetNativeModule``1">
            <summary>
            Gets a native module instance.
            </summary>
            <typeparam name="T">Type of native module.</typeparam>
            <returns>The native module instance.</returns>
        </member>
        <member name="T:ReactNative.Bridge.JavaScriptModuleBase">
            <summary>
            Base class for <see cref="T:ReactNative.Bridge.IJavaScriptModule"/>s.
            </summary>
            <summary>
            Base class for <see cref="T:ReactNative.Bridge.IJavaScriptModule"/>s.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.JavaScriptModuleBase.InvocationHandler">
            <summary>
            The invocation handler.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.JavaScriptModuleBase.Invoke(System.Object[],System.String)">
            <summary>
            Invoke a JavaScript method with the given arguments.
            </summary>
            <param name="args">The arguments.</param>
            <param name="caller">
            The name of the method. This parameter may be ignored if the name
            of the native method matches the name of the JavaScript method. The
            method name will be filled in automatically using the
            <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>.
            </param>
            <remarks>
            The expectation is that <see cref="T:ReactNative.Bridge.IJavaScriptModule"/>s will use
            this method to notify the framework of a JavaScript call to be
            executed. This is to overcome the absense of a performant "proxy"
            implementation in the .NET framework.
            </remarks>
        </member>
        <member name="M:ReactNative.Bridge.JavaScriptModuleBase.Invoke(System.String)">
            <summary>
            Invoke a JavaScript method with the given arguments.
            </summary>
            <param name="caller">
            The name of the method. This parameter may be ignored if the name
            of the native method matches the name of the JavaScript method. The
            method name will be filled in automatically using the
            <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>.
            </param>
            <remarks>
            The expectation is that <see cref="T:ReactNative.Bridge.IJavaScriptModule"/>s will use
            this method to notify the framework of a JavaScript call to be
            executed. This is to overcome the absense of a performant "proxy"
            implementation in the .NET framework.
            </remarks>
        </member>
        <member name="M:ReactNative.Bridge.JavaScriptModuleBase.Invoke(System.Object,System.String)">
            <summary>
            Invoke a JavaScript method with the given arguments.
            </summary>
            <param name="arg0">The first argument.</param>
            <param name="caller">
            The name of the method. This parameter may be ignored if the name
            of the native method matches the name of the JavaScript method. The
            method name will be filled in automatically using the
            <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>.
            </param>
            <remarks>
            The expectation is that <see cref="T:ReactNative.Bridge.IJavaScriptModule"/>s will use
            this method to notify the framework of a JavaScript call to be
            executed. This is to overcome the absense of a performant "proxy"
            implementation in the .NET framework.
            </remarks>
        </member>
        <member name="M:ReactNative.Bridge.JavaScriptModuleBase.Invoke(System.Object,System.Object,System.String)">
            <summary>
            Invoke a JavaScript method with the given arguments.
            </summary>
            <param name="arg0">The first argument.</param>
            <param name="arg1">The second argument.</param>
            <param name="caller">
            The name of the method. This parameter may be ignored if the name
            of the native method matches the name of the JavaScript method. The
            method name will be filled in automatically using the
            <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>.
            </param>
            <remarks>
            The expectation is that <see cref="T:ReactNative.Bridge.IJavaScriptModule"/>s will use
            this method to notify the framework of a JavaScript call to be
            executed. This is to overcome the absense of a performant "proxy"
            implementation in the .NET framework.
            </remarks>
        </member>
        <member name="M:ReactNative.Bridge.JavaScriptModuleBase.Invoke(System.Object,System.Object,System.Object,System.String)">
            <summary>
            Invoke a JavaScript method with the given arguments.
            </summary>
            <param name="arg0">The first argument.</param>
            <param name="arg1">The second argument.</param>
            <param name="arg2">The third argument.</param>
            <param name="caller">
            The name of the method. This parameter may be ignored if the name
            of the native method matches the name of the JavaScript method. The
            method name will be filled in automatically using the
            <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>.
            </param>
            <remarks>
            The expectation is that <see cref="T:ReactNative.Bridge.IJavaScriptModule"/>s will use
            this method to notify the framework of a JavaScript call to be
            executed. This is to overcome the absense of a performant "proxy"
            implementation in the .NET framework.
            </remarks>
        </member>
        <member name="M:ReactNative.Bridge.JavaScriptModuleBase.Invoke(System.Object,System.Object,System.Object,System.Object,System.String)">
            <summary>
            Invoke a JavaScript method with the given arguments.
            </summary>
            <param name="arg0">The first argument.</param>
            <param name="arg1">The second argument.</param>
            <param name="arg2">The third argument.</param>
            <param name="arg3">The fourth argument.</param>
            <param name="caller">
            The name of the method. This parameter may be ignored if the name
            of the native method matches the name of the JavaScript method. The
            method name will be filled in automatically using the
            <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>.
            </param>
            <remarks>
            The expectation is that <see cref="T:ReactNative.Bridge.IJavaScriptModule"/>s will use
            this method to notify the framework of a JavaScript call to be
            executed. This is to overcome the absense of a performant "proxy"
            implementation in the .NET framework.
            </remarks>
        </member>
        <member name="T:ReactNative.Bridge.JavaScriptModuleRegistration">
            <summary>
            Registration information for a <see cref="T:ReactNative.Bridge.IJavaScriptModule"/>. Creates
            a mapping of methods to IDs.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.JavaScriptModuleRegistration.#ctor(System.Type)">
            <summary>
            Instantiates the <see cref="T:ReactNative.Bridge.JavaScriptModuleRegistration"/>.
            </summary>
            <param name="moduleInterface">The module type.</param>
        </member>
        <member name="P:ReactNative.Bridge.JavaScriptModuleRegistration.ModuleInterface">
            <summary>
            The module type.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.JavaScriptModuleRegistration.Name">
            <summary>
            The module name.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.JavaScriptModuleRegistration.GetTracingName(System.String)">
            <summary>
            Get the tracing name for a particular module method by name.s
            </summary>
            <param name="method">The method name.</param>
            <returns>The tracing name.</returns>
        </member>
        <member name="T:ReactNative.Bridge.JavaScriptModuleRegistry">
            <summary>
            Class responsible for holding all <see cref="T:ReactNative.Bridge.IJavaScriptModule"/>s
            registered to a <see cref="T:ReactNative.Bridge.IReactInstance"/>. Requires that
            JavaScript modules use the <see cref="T:ReactNative.Bridge.JavaScriptModuleBase"/> base
            class, and implement each of it's methods to dispatch through the
            <see cref="M:ReactNative.Bridge.JavaScriptModuleBase.Invoke(System.Object[],System.String)"/> method.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.JavaScriptModuleRegistry.GetJavaScriptModule``1(ReactNative.Bridge.IReactInstance)">
            <summary>
            Gets an instance of a <see cref="T:ReactNative.Bridge.IJavaScriptModule"/>.
            </summary>
            <typeparam name="T">Type of JavaScript module.</typeparam>
            <param name="instance">The React instance.</param>
            <returns>The JavaScript module instance.</returns>
        </member>
        <member name="T:ReactNative.Bridge.JavaScriptModuleRegistry.Builder">
            <summary>
            Builder for <see cref="T:ReactNative.Bridge.JavaScriptModuleRegistry"/>.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.JavaScriptModuleRegistry.Builder.Add(System.Type)">
            <summary>
            Add a JavaScript module.
            </summary>
            <param name="type">The JavaScript module type.</param>
            <returns>The builder instance.</returns>
        </member>
        <member name="M:ReactNative.Bridge.JavaScriptModuleRegistry.Builder.Build">
            <summary>
            Build the JavaScript module registry.
            </summary>
            <returns>The registry.</returns>
        </member>
        <member name="T:ReactNative.Bridge.NativeArgumentsParseException">
            <summary>
            An exception thrown when converting between JavaScript and native arguments.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.NativeArgumentsParseException.#ctor">
            <summary>
            Instantiates the <see cref="T:ReactNative.Bridge.NativeArgumentsParseException"/>. 
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.NativeArgumentsParseException.#ctor(System.String)">
            <summary>
            Instantiates the <see cref="T:ReactNative.Bridge.NativeArgumentsParseException"/>. 
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:ReactNative.Bridge.NativeArgumentsParseException.#ctor(System.String,System.Exception)">
            <summary>
            Instantiates the <see cref="T:ReactNative.Bridge.NativeArgumentsParseException"/>. 
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ReactNative.Bridge.NativeArgumentsParseException.#ctor(System.String,System.String)">
            <summary>
            Instantiates the <see cref="T:ReactNative.Bridge.NativeArgumentsParseException"/>.
            </summary>
            <param name="message">The exception message.</param>
            <param name="parameterName">The parameter name.</param>
        </member>
        <member name="M:ReactNative.Bridge.NativeArgumentsParseException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Instantiates the <see cref="T:ReactNative.Bridge.NativeArgumentsParseException"/>.
            </summary>
            <param name="message">The exception message.</param>
            <param name="parameterName">The parameter name.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:ReactNative.Bridge.NativeModuleBase">
            <summary>
            Base class for React Native modules. Implementations can be linked
            to lifecycle events, such as the creation and disposal of the
            <see cref="T:ReactNative.Bridge.IReactInstance"/> by overriding the appropriate methods.
            
            Native methods are exposed to JavaScript with the
            <see cref="T:ReactNative.Bridge.ReactMethodAttribute"/> annotation. These methods may only
            use arguments that can be parsed by <see cref="M:Newtonsoft.Json.Linq.JToken.ToObject``1"/> or
            <see cref="T:ReactNative.Bridge.ICallback"/>, which maps from a JavaScript function and can
            be used only as a last parameter, or in the case of success and error
            callback pairs, the last two arguments respectively.
            
            All methods annotated with <see cref="T:ReactNative.Bridge.ReactMethodAttribute"/> must
            return <see cref="T:System.Void"/>.
            
            Please note that it is not allowed to have multiple methods annotated
            with <see cref="T:ReactNative.Bridge.ReactMethodAttribute"/> that share the same name.
            </summary>
            <remarks>
            Default implementations of <see cref="M:ReactNative.Bridge.NativeModuleBase.Initialize"/> and 
            <see cref="M:ReactNative.Bridge.NativeModuleBase.OnReactInstanceDispose"/> are provided for convenience.
            Subclasses need not call these base methods should they choose to
            override them.
            </remarks>
        </member>
        <member name="M:ReactNative.Bridge.NativeModuleBase.#ctor">
            <summary>
            Instantiates a <see cref="T:ReactNative.Bridge.NativeModuleBase"/>.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.NativeModuleBase.#ctor(ReactNative.Bridge.IReactDelegateFactory)">
            <summary>
            Instantiates a <see cref="T:ReactNative.Bridge.NativeModuleBase"/>.
            </summary>
            <param name="delegateFactory">
            Factory responsible for creating delegates for method invocations.
            </param>
        </member>
        <member name="P:ReactNative.Bridge.NativeModuleBase.CanOverrideExistingModule">
            <summary>
            Return true if you intend to override some other native module that
            was registered, e.g., as part of a different package (such as the
            core one). Trying to override without returning true from this 
            method is considered an error and will throw an exception during
            initialization. By default, all modules return false.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.NativeModuleBase.Constants">
            <summary>
            The constants exported by this module.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.NativeModuleBase.Methods">
            <summary>
            The methods callabke from JavaScript on this module.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.NativeModuleBase.Name">
            <summary>
            The name of the module.
            </summary>
            <remarks>
            This will be the name used to <code>require()</code> this module
            from JavaScript.
            </remarks>
        </member>
        <member name="M:ReactNative.Bridge.NativeModuleBase.Initialize">
            <summary>
            Called after the creation of a <see cref="T:ReactNative.Bridge.IReactInstance"/>, in
            order to initialize native modules that require the React or
            JavaScript modules.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.NativeModuleBase.OnReactInstanceDispose">
            <summary>
            Called before a <see cref="T:ReactNative.Bridge.IReactInstance"/> is disposed.
            </summary>
        </member>
        <member name="T:ReactNative.Bridge.Queue.IMessageQueueThread">
            <summary>
            Encapsulates an action queue.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.Queue.IMessageQueueThread.RunOnQueue(System.Action)">
            <summary>
            Runs the given action on this thread. 
            </summary>
            <remarks>
            The action will be submitted to the end of the event queue
            even if it is being submitted from the same queue Thread.
            </remarks>
            <param name="action">The action.</param>
        </member>
        <member name="M:ReactNative.Bridge.Queue.IMessageQueueThread.IsOnThread">
            <summary>
            Checks whether the current thread is also the thread 
            associated with this <see cref="T:ReactNative.Bridge.Queue.IMessageQueueThread"/>.
            </summary>
            <returns>
            <b>true</b> if the current thread is associated with this
            instance, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="T:ReactNative.Bridge.Queue.IReactQueueConfiguration">
            <summary>
            Specifies which <see cref="T:ReactNative.Bridge.Queue.IMessageQueueThread"/>s must be used to run
            the various contexts of execution within React (dispatcher, native
            modules, and JS). Some of these queue *may* be the same but should be
            coded against as if they are different.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.Queue.IReactQueueConfiguration.DispatcherQueueThread">
            <summary>
            The main UI thread.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.Queue.IReactQueueConfiguration.NativeModulesQueueThread">
            <summary>
            The native modules thread.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.Queue.IReactQueueConfiguration.JavaScriptQueueThread">
            <summary>
            The JavaScript thread.
            </summary>
        </member>
        <member name="T:ReactNative.Bridge.Queue.LimitedConcurrencyLevelTaskScheduler">
            <summary>
            Provides a task scheduler that ensures a maximum concurrency level while 
            running on top of the thread pool.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.Queue.LimitedConcurrencyLevelTaskScheduler.#ctor(System.Int32)">
            <summary>
            Creates a new instance with the specified degree of parallelism. 
            </summary>
            <param name="maxDegreeOfParallelism">The degrees of parallelism.</param>
        </member>
        <member name="M:ReactNative.Bridge.Queue.LimitedConcurrencyLevelTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>
            Queues a task to the scheduler. 
            </summary>
            <param name="task">The task to enqueue.</param>
        </member>
        <member name="M:ReactNative.Bridge.Queue.LimitedConcurrencyLevelTaskScheduler.NotifyThreadPoolOfPendingWork">
            <summary>
            Inform the ThreadPool that there's work to be executed for this scheduler. 
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.Queue.LimitedConcurrencyLevelTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>
            Attempts to execute the specified task on the current thread. 
            </summary>
            <param name="task">The task to execute.</param>
            <param name="taskWasPreviouslyQueued">Task queue flag.</param>
            <returns>An indicator if the task was executed inline.</returns>
        </member>
        <member name="M:ReactNative.Bridge.Queue.LimitedConcurrencyLevelTaskScheduler.TryDequeue(System.Threading.Tasks.Task)">
            <summary>
            Attempt to remove a previously scheduled task from the scheduler. 
            </summary>
            <param name="task">The task to dequeue.</param>
            <returns>An indicator if the task was dequeued.</returns>
        </member>
        <member name="P:ReactNative.Bridge.Queue.LimitedConcurrencyLevelTaskScheduler.MaximumConcurrencyLevel">
            <summary>
            Gets the maximum concurrency level supported by this scheduler. 
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.Queue.LimitedConcurrencyLevelTaskScheduler.GetScheduledTasks">
            <summary>
            Gets an enumerable of the tasks currently scheduled on this scheduler. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:ReactNative.Bridge.Queue.MessageQueueThread">
            <summary>
            Encapsulates an action queue.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.Queue.MessageQueueThread.IsDisposed">
            <summary>
            Flags if the <see cref="T:ReactNative.Bridge.Queue.MessageQueueThread"/> is disposed.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.Queue.MessageQueueThread.IsOnThread">
            <summary>
            Checks if the caller is running on the queue instance.
            </summary>
            <returns>
            <b>true</b> if the caller is calling from the queue, <b>false</b>
            otherwise.
            </returns>
        </member>
        <member name="M:ReactNative.Bridge.Queue.MessageQueueThread.RunOnQueue(System.Action)">
            <summary>
            Queues an action to run.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:ReactNative.Bridge.Queue.MessageQueueThread.Dispose">
            <summary>
            Disposes the action queue.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.Queue.MessageQueueThread.Enqueue(System.Action)">
            <summary>
            Enqueues the action.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:ReactNative.Bridge.Queue.MessageQueueThread.IsOnThreadCore">
            <summary>
            Checks if the caller is running on the queue instance.
            </summary>
            <returns>
            <b>true</b> if the caller is calling from the queue, <b>false</b>
            otherwise.
            </returns>
        </member>
        <member name="M:ReactNative.Bridge.Queue.MessageQueueThread.Dispose(System.Boolean)">
            <summary>
            Disposes the action queue.
            </summary>
            <param name="disposing">
            <b>false</b> if dispose was triggered by a finalizer, <b>true</b>
            otherwise.
            </param>
        </member>
        <member name="M:ReactNative.Bridge.Queue.MessageQueueThread.Create(ReactNative.Bridge.Queue.MessageQueueThreadSpec,System.Action{System.Exception})">
            <summary>
            Factory to create the action queue.
            </summary>
            <param name="spec">The action queue specification.</param>
            <param name="handler">The exception handler.</param>
            <returns>The action queue instance.</returns>
        </member>
        <member name="T:ReactNative.Bridge.Queue.MessageQueueThreadExtensions">
            <summary>
            Extension methods for <see cref="T:ReactNative.Bridge.Queue.IMessageQueueThread"/>s.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.Queue.MessageQueueThreadExtensions.AssertOnThread(ReactNative.Bridge.Queue.IMessageQueueThread)">
            <summary>
            Asserts <see cref="M:ReactNative.Bridge.Queue.IMessageQueueThread.IsOnThread"/>, throwing if the <b>false</b>.
            </summary>
            <param name="actionQueue">The message queue thread.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the assertion fails.
            </exception>
        </member>
        <member name="M:ReactNative.Bridge.Queue.MessageQueueThreadExtensions.CallOnQueue``1(ReactNative.Bridge.Queue.IMessageQueueThread,System.Func{``0})">
            <summary>
            Calls a function on a message queue and returns a task to await the response.
            </summary>
            <typeparam name="T">Type of response.</typeparam>
            <param name="actionQueue">The message queue thread.</param>
            <param name="func">The function.</param>
            <returns>A task to await the result.</returns>
        </member>
        <member name="T:ReactNative.Bridge.Queue.MessageQueueThreadKind">
            <summary>
            Types of <see cref="T:ReactNative.Bridge.Queue.IMessageQueueThread"/>.
            </summary>
        </member>
        <member name="F:ReactNative.Bridge.Queue.MessageQueueThreadKind.DispatcherThread">
            <summary>
            Dispatcher thread type.
            </summary>
        </member>
        <member name="F:ReactNative.Bridge.Queue.MessageQueueThreadKind.BackgroundSingleThread">
            <summary>
            Single background thread type.
            </summary>
        </member>
        <member name="F:ReactNative.Bridge.Queue.MessageQueueThreadKind.BackgroundAnyThread">
            <summary>
            Any background thread type.
            </summary>
        </member>
        <member name="T:ReactNative.Bridge.Queue.MessageQueueThreadSpec">
            <summary>
            Specification for creating a <see cref="T:ReactNative.Bridge.Queue.IMessageQueueThread"/>.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.Queue.MessageQueueThreadSpec.Name">
            <summary>
            The name of the <see cref="T:ReactNative.Bridge.Queue.IMessageQueueThread"/>.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.Queue.MessageQueueThreadSpec.Kind">
            <summary>
            The type of the <see cref="T:ReactNative.Bridge.Queue.IMessageQueueThread"/>.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.Queue.MessageQueueThreadSpec.DispatcherThreadSpec">
            <summary>
            Singleton dispatcher <see cref="T:ReactNative.Bridge.Queue.IMessageQueueThread"/> specification.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.Queue.MessageQueueThreadSpec.Create(System.String,ReactNative.Bridge.Queue.MessageQueueThreadKind)">
            <summary>
            Factory for creating <see cref="T:ReactNative.Bridge.Queue.MessageQueueThreadSpec"/>s.
            </summary>
            <param name="name">The name.</param>
            <param name="kind">The kind.</param>
            <returns>The instance.</returns>
        </member>
        <member name="T:ReactNative.Bridge.Queue.ReactQueueConfigurationSpec">
            <summary>
            Specification for creating a <see cref="T:ReactNative.Bridge.Queue.IReactQueueConfiguration"/>.
            This exists so the <see cref="T:ReactNative.Bridge.IReactInstance"/> is able to set
            exception handlers on the <see cref="T:ReactNative.Bridge.Queue.IMessageQueueThread"/>s it uses.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.Queue.ReactQueueConfigurationSpec.NativeModulesQueueThreadSpec">
            <summary>
            The native modules <see cref="T:ReactNative.Bridge.Queue.IMessageQueueThread"/> specification.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.Queue.ReactQueueConfigurationSpec.JSQueueThreadSpec">
            <summary>
            The JavaScript <see cref="T:ReactNative.Bridge.Queue.IMessageQueueThread"/> specification.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.Queue.ReactQueueConfigurationSpec.Default">
            <summary>
            The default <see cref="T:ReactNative.Bridge.Queue.ReactQueueConfigurationSpec"/> instance.
            </summary>
        </member>
        <member name="T:ReactNative.Bridge.Queue.ReactQueueConfigurationSpec.Builder">
            <summary>
            Builder for <see cref="T:ReactNative.Bridge.Queue.ReactQueueConfigurationSpec"/>.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.Queue.ReactQueueConfigurationSpec.Builder.NativeModulesQueueThreadSpec">
            <summary>
            Set the native modules <see cref="T:ReactNative.Bridge.Queue.MessageQueueThreadSpec"/>.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.Queue.ReactQueueConfigurationSpec.Builder.JSQueueThreadSpec">
            <summary>
            Set the JavaScript <see cref="T:ReactNative.Bridge.Queue.MessageQueueThreadSpec"/>.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.Queue.ReactQueueConfigurationSpec.Builder.Build">
            <summary>
            Build the <see cref="T:ReactNative.Bridge.Queue.ReactQueueConfigurationSpec"/>.
            </summary>
            <returns>The instance.</returns>
        </member>
        <member name="T:ReactNative.Bridge.ReactContext">
            <summary>
            Abstract context wrapper for the React instance to manage
            lifecycle events.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.ReactContext.ReactInstance">
            <summary>
            The React instance associated with the context.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.ReactContext.HasActiveReactInstance">
            <summary>
            Checks if the context has an active <see cref="T:ReactNative.Bridge.IReactInstance"/>.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.ReactContext.NativeModuleCallExceptionHandler">
            <summary>
            The exception handler for native module calls.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.ReactContext.GetJavaScriptModule``1">
            <summary>
            Gets the instance of the <see cref="T:ReactNative.Bridge.IJavaScriptModule"/> associated
            with the <see cref="T:ReactNative.Bridge.IReactInstance"/>.
            </summary>
            <typeparam name="T">Type of JavaScript module.</typeparam>
            <returns>The JavaScript module instance.</returns>
        </member>
        <member name="M:ReactNative.Bridge.ReactContext.GetNativeModule``1">
            <summary>
            Gets the instance of the <see cref="T:ReactNative.Bridge.INativeModule"/> associated
            with the <see cref="T:ReactNative.Bridge.IReactInstance"/>.
            </summary>
            <typeparam name="T">Type of native module.</typeparam>
            <returns>The native module instance.</returns>
        </member>
        <member name="M:ReactNative.Bridge.ReactContext.AddLifecycleEventListener(ReactNative.Bridge.ILifecycleEventListener)">
            <summary>
            Adds a lifecycle event listener to the context.
            </summary>
            <param name="listener">The listener.</param>
        </member>
        <member name="M:ReactNative.Bridge.ReactContext.RemoveLifecycleEventListener(ReactNative.Bridge.ILifecycleEventListener)">
            <summary>
            Removes a lifecycle event listener from the context.
            </summary>
            <param name="listener">The listener.</param>
        </member>
        <member name="M:ReactNative.Bridge.ReactContext.OnSuspend">
            <summary>
            Called by the host when the application suspends.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.ReactContext.OnResume">
            <summary>
            Called by the host when the application resumes.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.ReactContext.DisposeAsync">
            <summary>
            Called by the host when the application shuts down.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.ReactContext.IsOnDispatcherQueueThread">
            <summary>
            Checks if the current thread is on the React instance dispatcher
            queue thread.
            </summary>
            <returns>
            <b>true</b> if the call is from the dispatcher queue thread,
             <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:ReactNative.Bridge.ReactContext.AssertOnDispatcherQueueThread">
            <summary>
            Asserts that the current thread is on the React instance dispatcher
            queue thread.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.ReactContext.RunOnDispatcherQueueThread(System.Action)">
            <summary>
            Enqueues an action on the dispatcher queue thread.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:ReactNative.Bridge.ReactContext.IsOnJavaScriptQueueThread">
            <summary>
            Checks if the current thread is on the React instance
            JavaScript queue thread.
            </summary>
            <returns>
            <b>true</b> if the call is from the JavaScript queue thread,
            <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:ReactNative.Bridge.ReactContext.AssertOnJavaScriptQueueThread">
            <summary>
            Asserts that the current thread is on the React instance
            JavaScript queue thread.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.ReactContext.RunOnJavaScriptQueueThread(System.Action)">
            <summary>
            Enqueues an action on the JavaScript queue thread.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:ReactNative.Bridge.ReactContext.IsOnNativeModulesQueueThread">
            <summary>
            Checks if the current thread is on the React instance native 
            modules queue thread.
            </summary>
            <returns>
            <b>true</b> if the call is from the native modules queue thread,
            <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:ReactNative.Bridge.ReactContext.AssertOnNativeModulesQueueThread">
            <summary>
            Asserts that the current thread is on the React instance native
            modules queue thread.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.ReactContext.RunOnNativeModulesQueueThread(System.Action)">
            <summary>
            Enqueues an action on the native modules queue thread.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:ReactNative.Bridge.ReactContext.HandleException(System.Exception)">
            <summary>
            Passes the exception to the current 
            <see cref="P:ReactNative.Bridge.ReactContext.NativeModuleCallExceptionHandler"/>, if set, otherwise
            rethrows.
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:ReactNative.Bridge.ReactContext.InitializeWithInstance(ReactNative.Bridge.IReactInstance)">
            <summary>
            Set and initialize the <see cref="T:ReactNative.Bridge.IReactInstance"/> instance
            for this context.
            </summary>
            <param name="instance">The React instance.</param>
            <remarks>
            This method should be called exactly once.
            </remarks>
        </member>
        <member name="T:ReactNative.Bridge.ReactContextNativeModuleBase">
            <summary>
            Base class for React Native modules that require access to the 
            <see cref="T:ReactNative.Bridge.ReactContext"/>.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.ReactContextNativeModuleBase.#ctor(ReactNative.Bridge.ReactContext)">
            <summary>
            Instantiates the <see cref="T:ReactNative.Bridge.ReactContextNativeModuleBase"/>.
            </summary>
            <param name="reactContext">The React context.</param>
        </member>
        <member name="P:ReactNative.Bridge.ReactContextNativeModuleBase.Context">
            <summary>
            The React context.
            </summary>
        </member>
        <member name="T:ReactNative.Bridge.ReactMethodAttribute">
            <summary>
            An attribute for annotating methods in an
            <see cref="T:ReactNative.Bridge.INativeModule"/>.
            </summary>
        </member>
        <member name="T:ReactNative.Bridge.ReflectionReactDelegateFactory">
            <summary>
            A delegate factory that uses reflection to create the native method.
            </summary>
        </member>
        <member name="P:ReactNative.Bridge.ReflectionReactDelegateFactory.Instance">
            <summary>
            The <see cref="T:ReactNative.Bridge.ReflectionReactDelegateFactory"/> instance.
            </summary>
        </member>
        <member name="M:ReactNative.Bridge.ReflectionReactDelegateFactory.Create(ReactNative.Bridge.INativeModule,System.Reflection.MethodInfo)">
            <summary>
            Create an invocation delegate from the given method.
            </summary>
            <param name="module">The native module instance.</param>
            <param name="method">The method.</param>
            <returns>The invocation delegate.</returns>
        </member>
        <member name="T:ReactNative.Tracing.NullLoggingActivityBuilder">
            <summary>
            Temporary NullLoggingActivityBuilder.
            </summary>
        </member>
        <member name="M:ReactNative.Tracing.NullLoggingActivityBuilder.Start">
            <summary>
            Dummy method to satisfy interface requirements.
            </summary>
            <returns>An empty disposable object.</returns>
        </member>
        <member name="T:ReactNative.Tracing.Tracer">
            <summary>
            Temporary NullTracing helpers for the application.
            </summary>
        </member>
        <member name="F:ReactNative.Tracing.Tracer.TRACE_TAG_REACT_BRIDGE">
            <summary>
            Trace ID for bridge events.
            </summary>
        </member>
        <member name="F:ReactNative.Tracing.Tracer.TRACE_TAG_REACT_APPS">
            <summary>
            Trace ID for application events.
            </summary>
        </member>
        <member name="F:ReactNative.Tracing.Tracer.TRACE_TAG_REACT_VIEW">
            <summary>
            Trace ID for view events.
            </summary>
        </member>
        <member name="M:ReactNative.Tracing.Tracer.Trace(System.Int32,System.String)">
            <summary>
            Create a null logging activity builder.
            </summary>
            <param name="tag">The trace tag.</param>
            <param name="name">The event name.</param>
            <returns>The null logging activity builder with a fake Start method.</returns>
        </member>
        <member name="M:ReactNative.Tracing.Tracer.Write(System.Int32,System.String)">
            <summary>
            Write an event.
            </summary>
            <param name="tag">The trace tag.</param>
            <param name="eventName">The event name.</param>
        </member>
        <member name="M:ReactNative.Tracing.Tracer.Error(System.Int32,System.String,System.Exception)">
            <summary>
            Write an error event.
            </summary>
            <param name="tag">The trace tag.</param>
            <param name="eventName">The event name.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="T:ReactNative.ReactDelegateFactoryBase">
            <summary>
            Base implementation for <see cref="T:ReactNative.Bridge.IReactDelegateFactory"/>.
            </summary>
        </member>
        <member name="F:ReactNative.ReactDelegateFactoryBase.AsyncMethodType">
            <summary>
            Discriminator for asynchronous methods.
            </summary>
        </member>
        <member name="F:ReactNative.ReactDelegateFactoryBase.SyncMethodType">
            <summary>
            Discriminator for synchronous methods.
            </summary>
        </member>
        <member name="F:ReactNative.ReactDelegateFactoryBase.PromiseMethodType">
            <summary>
            Discriminator for methods with promises.
            </summary>
        </member>
        <member name="M:ReactNative.ReactDelegateFactoryBase.#ctor">
            <summary>
            Instantiates a <see cref="T:ReactNative.ReactDelegateFactoryBase"/>.
            </summary>
        </member>
        <member name="M:ReactNative.ReactDelegateFactoryBase.Create(ReactNative.Bridge.INativeModule,System.Reflection.MethodInfo)">
            <summary>
            Create an invocation delegate from the given method.
            </summary>
            <param name="nativeModule">The native module instance.</param>
            <param name="method">The method.</param>
            <returns>The invocation delegate.</returns>
        </member>
        <member name="M:ReactNative.ReactDelegateFactoryBase.GetMethodType(System.Reflection.MethodInfo)">
            <summary>
            Extracts the native method type from the method.
            </summary>
            <param name="method">The method.</param>
            <returns>The native method type.</returns>
        </member>
        <member name="M:ReactNative.ReactDelegateFactoryBase.Validate(System.Reflection.MethodInfo)">
            <summary>
            Check that the method is valid for <see cref="T:ReactNative.Bridge.ReactMethodAttribute"/>.
            </summary>
            <param name="method">The method.</param>
        </member>
        <member name="M:ReactNative.ReactDelegateFactoryBase.CreateCallback(Newtonsoft.Json.Linq.JToken,ReactNative.Bridge.IReactInstance)">
            <summary>
            Create a callback.
            </summary>
            <param name="callbackToken">The callback ID token.</param>
            <param name="reactInstance">The React instance.</param>
            <returns>The callback.</returns>
        </member>
        <member name="M:ReactNative.ReactDelegateFactoryBase.CreatePromise(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken,ReactNative.Bridge.IReactInstance)">
            <summary>
            Create a promise.
            </summary>
            <param name="resolveToken">The resolve callback ID token.</param>
            <param name="rejectToken">The reject callback ID token.</param>
            <param name="reactInstance">The React instance.</param>
            <returns>The promise.</returns>
        </member>
        <member name="T:ReactNative.Chakra.JavaScriptBackgroundWorkItemCallback">
            <summary>
                A background work item callback.
            </summary>
            <remarks>
                This is passed to the host's thread service (if provided) to allow the host to 
                invoke the work item callback on the background thread of its choice.
            </remarks>
            <param name="callbackData">Data argument passed to the thread service.</param>
        </member>
        <member name="T:ReactNative.Chakra.JavaScriptBeforeCollectCallback">
            <summary>
                A callback called before collection.
            </summary>
            <param name="callbackState">The state passed to SetBeforeCollectCallback.</param>
        </member>
        <member name="T:ReactNative.Chakra.JavaScriptContext">
            <summary>
                A script context.
            </summary>
            <remarks>
                <para>
                Each script context contains its own global object, distinct from the global object in 
                other script contexts.
                </para>
                <para>
                Many Chakra hosting APIs require an "active" script context, which can be set using 
                Current. Chakra hosting APIs that require a current context to be set will note 
                that explicitly in their documentation.
                </para>
            </remarks>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptContext.reference">
            <summary>
                The reference.
            </summary>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptContext.#ctor(System.IntPtr)">
            <summary>
                Initializes a new instance of the <see cref="T:ReactNative.Chakra.JavaScriptContext"/> struct. 
            </summary>
            <param name="reference">The reference.</param>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptContext.Invalid">
            <summary>
                Gets an invalid context.
            </summary>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptContext.Current">
            <summary>
                Gets or sets the current script context on the thread.
            </summary>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptContext.HasException">
            <summary>
                Gets a value indicating whether the runtime of the current context is in an exception state.
            </summary>
            <remarks>
                <para>
                If a call into the runtime results in an exception (either as the result of running a 
                script or due to something like a conversion failure), the runtime is placed into an 
                "exception state." All calls into any context created by the runtime (except for the 
                exception APIs) will fail with <c>InExceptionState</c> until the exception is 
                cleared.
                </para>
                <para>
                If the runtime of the current context is in the exception state when a callback returns 
                into the engine, the engine will automatically rethrow the exception.
                </para>
                <para>
                Requires an active script context.
                </para>
            </remarks>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptContext.Runtime">
            <summary>
                Gets the runtime that the context belongs to.
            </summary>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptContext.IsValid">
            <summary>
                Gets a value indicating whether the context is a valid context or not.
            </summary>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptContext.Idle">
            <summary>
                Tells the runtime to do any idle processing it need to do.
            </summary>
            <remarks>
                <para>
                If idle processing has been enabled for the current runtime, calling <c>Idle</c> will 
                inform the current runtime that the host is idle and that the runtime can perform 
                memory cleanup tasks.
                </para>
                <para>
                <c>Idle</c> will also return the number of system ticks until there will be more idle work
                for the runtime to do. Calling <c>Idle</c> before this number of ticks has passed will do
                no work.
                </para>
                <para>
                Requires an active script context.
                </para>
            </remarks>
            <returns>
                The next system tick when there will be more idle work to do. Returns the 
                maximum number of ticks if there no upcoming idle work to do.
            </returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptContext.ParseScript(System.String,ReactNative.Chakra.JavaScriptSourceContext,System.String)">
            <summary>
                Parses a script and returns a <c>Function</c> representing the script.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="script">The script to parse.</param>
            <param name="sourceContext">
                A cookie identifying the script that can be used by script contexts that have debugging enabled.
            </param>
            <param name="sourceName">The location the script came from.</param>
            <returns>A <c>Function</c> representing the script code.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptContext.ParseScript(System.String,System.Byte[],ReactNative.Chakra.JavaScriptSourceContext,System.String)">
            <summary>
                Parses a serialized script and returns a <c>Function</c> representing the script.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="script">The script to parse.</param>
            <param name="buffer">The serialized script.</param>
            <param name="sourceContext">
                A cookie identifying the script that can be used by script contexts that have debugging enabled.
            </param>
            <param name="sourceName">The location the script came from.</param>
            <returns>A <c>Function</c> representing the script code.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptContext.ParseScript(System.String)">
            <summary>
                Parses a script and returns a <c>Function</c> representing the script.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="script">The script to parse.</param>
            <returns>A <c>Function</c> representing the script code.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptContext.ParseScript(System.String,System.Byte[])">
            <summary>
                Parses a serialized script and returns a <c>Function</c> representing the script.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="script">The script to parse.</param>
            <param name="buffer">The serialized script.</param>
            <returns>A <c>Function</c> representing the script code.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptContext.RunScript(System.String,ReactNative.Chakra.JavaScriptSourceContext,System.String)">
            <summary>
                Executes a script.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="script">The script to run.</param>
            <param name="sourceContext">
                A cookie identifying the script that can be used by script contexts that have debugging enabled.
            </param>
            <param name="sourceName">The location the script came from.</param>
            <returns>The result of the script, if any.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptContext.RunScript(System.String,System.Byte[],ReactNative.Chakra.JavaScriptSourceContext,System.String)">
            <summary>
                Runs a serialized script.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="script">The source code of the serialized script.</param>
            <param name="buffer">The serialized script.</param>
            <param name="sourceContext">
                A cookie identifying the script that can be used by script contexts that have debugging enabled.
            </param>
            <param name="sourceName">The location the script came from.</param>
            <returns>The result of the script, if any.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptContext.RunScript(System.String)">
            <summary>
                Executes a script.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="script">The script to run.</param>
            <returns>The result of the script, if any.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptContext.RunScript(System.String,System.Byte[])">
            <summary>
                Runs a serialized script.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="script">The source code of the serialized script.</param>
            <param name="buffer">The serialized script.</param>
            <returns>The result of the script, if any.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptContext.SerializeScript(System.String,System.Byte[])">
            <summary>
                Serializes a parsed script to a buffer than can be reused.
            </summary>
            <remarks>
                <para>
                SerializeScript parses a script and then stores the parsed form of the script in a 
                runtime-independent format. The serialized script then can be deserialized in any
                runtime without requiring the script to be re-parsed.
                </para>
                <para>
                Requires an active script context.
                </para>
            </remarks>
            <param name="script">The script to serialize.</param>
            <param name="buffer">The buffer to put the serialized script into. Can be null.</param>
            <returns>
                The size of the buffer, in bytes, required to hold the serialized script.
            </returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptContext.GetAndClearException">
            <summary>
                Returns the exception that caused the runtime of the current context to be in the 
                exception state and resets the exception state for that runtime.
            </summary>
            <remarks>
                <para>
                If the runtime of the current context is not in an exception state, this API will throw
                <c>JsErrorInvalidArgument</c>. If the runtime is disabled, this will return an exception
                indicating that the script was terminated, but it will not clear the exception (the 
                exception will be cleared if the runtime is re-enabled using 
                <c>EnableRuntimeExecution</c>).
                </para>
                <para>
                Requires an active script context.
                </para>
            </remarks>
            <returns>The exception for the runtime of the current context.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptContext.SetException(ReactNative.Chakra.JavaScriptValue)">
            <summary>
                Sets the runtime of the current context to an exception state.
            </summary>
            <remarks>
                <para>
                If the runtime of the current context is already in an exception state, this API will 
                throw <c>JsErrorInExceptionState</c>.
                </para>
                <para>
                Requires an active script context.
                </para>
            </remarks>
            <param name="exception">
                The JavaScript exception to set for the runtime of the current context.
            </param>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptContext.StartDebugging">
            <summary>
                Starts debugging in the context.
            </summary>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptContext.AddRef">
            <summary>
                Adds a reference to a script context.
            </summary>
            <remarks>
                Calling AddRef ensures that the context will not be freed until Release is called.
            </remarks>
            <returns>The object's new reference count.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptContext.Release">
            <summary>
                Releases a reference to a script context.
            </summary>
            <remarks>
                Removes a reference to a context that was created by AddRef.
            </remarks>
            <returns>The object's new reference count.</returns>
        </member>
        <member name="T:ReactNative.Chakra.JavaScriptContext.Scope">
            <summary>
                A scope automatically sets a context to current and resets the original context
                when disposed.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptContext.Scope.previousContext">
            <summary>
                The previous context.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptContext.Scope.disposed">
            <summary>
                Whether the structure has been disposed.
            </summary>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptContext.Scope.#ctor(ReactNative.Chakra.JavaScriptContext)">
            <summary>
                Initializes a new instance of the <see cref="T:ReactNative.Chakra.JavaScriptContext.Scope"/> struct. 
            </summary>
            <param name="context">The context to create the scope for.</param>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptContext.Scope.Dispose">
            <summary>
                Disposes the scope and sets the previous context to current.
            </summary>
        </member>
        <member name="T:ReactNative.Chakra.JavaScriptEngineException">
            <summary>
                An exception that occurred in the workings of the JavaScript engine itself.
            </summary>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptEngineException.#ctor(ReactNative.Chakra.JavaScriptErrorCode)">
            <summary>
                Initializes a new instance of the <see cref="T:ReactNative.Chakra.JavaScriptEngineException"/> class. 
            </summary>
            <param name="code">The error code returned.</param>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptEngineException.#ctor(ReactNative.Chakra.JavaScriptErrorCode,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:ReactNative.Chakra.JavaScriptEngineException"/> class. 
            </summary>
            <param name="code">The error code returned.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="T:ReactNative.Chakra.JavaScriptErrorCode">
            <summary>
                An error code returned from a Chakra hosting API.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.NoError">
            <summary>
                Success error code.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.CategoryUsage">
            <summary>
                Category of errors that relates to incorrect usage of the API itself.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.InvalidArgument">
            <summary>
                An argument to a hosting API was invalid.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.NullArgument">
            <summary>
                An argument to a hosting API was null in a context where null is not allowed.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.NoCurrentContext">
            <summary>
                The hosting API requires that a context be current, but there is no current context.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.InExceptionState">
            <summary>
                The engine is in an exception state and no APIs can be called until the exception is 
                cleared.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.NotImplemented">
            <summary>
                A hosting API is not yet implemented.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.WrongThread">
            <summary>
                A hosting API was called on the wrong thread.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.RuntimeInUse">
            <summary>
                A runtime that is still in use cannot be disposed.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.BadSerializedScript">
            <summary>
                A bad serialized script was used, or the serialized script was serialized by a 
                different version of the Chakra engine.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.InDisabledState">
            <summary>
                The runtime is in a disabled state.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.CannotDisableExecution">
            <summary>
                Runtime does not support reliable script interruption.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.HeapEnumInProgress">
            <summary>
                A heap enumeration is currently underway in the script context.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.ArgumentNotObject">
            <summary>
                A hosting API that operates on Object values was called with a non-Object value.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.InProfileCallback">
            <summary>
                A script context is in the middle of a profile callback.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.InThreadServiceCallback">
            <summary>
                A thread service callback is currently underway.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.CannotSerializeDebugScript">
            <summary>
                Scripts cannot be serialized in debug contexts.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.AlreadyDebuggingContext">
            <summary>
                The context cannot be put into a debug state because it is already in a debug state.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.AlreadyProfilingContext">
            <summary>
                The context cannot start profiling because it is already profiling.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.IdleNotEnabled">
            <summary>
                Idle notification given when the host did not enable idle processing.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.CategoryEngine">
            <summary>
                Category of errors that relates to errors occurring within the engine itself.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.OutOfMemory">
            <summary>
                The Chakra engine has run out of memory.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.CategoryScript">
            <summary>
                Category of errors that relates to errors in a script.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.ScriptException">
            <summary>
                A JavaScript exception occurred while running a script.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.ScriptCompile">
            <summary>
                JavaScript failed to compile.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.ScriptTerminated">
            <summary>
                A script was terminated due to a request to suspend a runtime.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.ScriptEvalDisabled">
            <summary>
                A script was terminated because it tried to use "eval" or "function" and eval was disabled.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.CategoryFatal">
            <summary>
                Category of errors that are fatal and signify failure of the engine.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptErrorCode.Fatal">
            <summary>
                A fatal error in the engine has occurred.
            </summary>
        </member>
        <member name="T:ReactNative.Chakra.JavaScriptException">
            <summary>
                An exception returned from the Chakra engine.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptException.code">
            <summary>
            The error code.
            </summary>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptException.#ctor(ReactNative.Chakra.JavaScriptErrorCode)">
            <summary>
                Initializes a new instance of the <see cref="T:ReactNative.Chakra.JavaScriptException"/> class. 
            </summary>
            <param name="code">The error code returned.</param>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptException.#ctor(ReactNative.Chakra.JavaScriptErrorCode,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:ReactNative.Chakra.JavaScriptException"/> class. 
            </summary>
            <param name="code">The error code returned.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptException.ErrorCode">
            <summary>
                Gets the error code.
            </summary>
        </member>
        <member name="T:ReactNative.Chakra.JavaScriptFatalException">
            <summary>
                A fatal exception occurred.
            </summary>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptFatalException.#ctor(ReactNative.Chakra.JavaScriptErrorCode)">
            <summary>
                Initializes a new instance of the <see cref="T:ReactNative.Chakra.JavaScriptFatalException"/> class. 
            </summary>
            <param name="code">The error code returned.</param>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptFatalException.#ctor(ReactNative.Chakra.JavaScriptErrorCode,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:ReactNative.Chakra.JavaScriptFatalException"/> class. 
            </summary>
            <param name="code">The error code returned.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="T:ReactNative.Chakra.JavaScriptMemoryAllocationCallback">
            <summary>
                User implemented callback routine for memory allocation events
            </summary>
            <param name="callbackState">The state passed to SetRuntimeMemoryAllocationCallback.</param>
            <param name="allocationEvent">The type of type allocation event.</param>
            <param name="allocationSize">The size of the allocation.</param>
            <returns>
                For the Allocate event, returning true allows the runtime to continue with 
                allocation. Returning false indicates the allocation request is rejected. The return value
                is ignored for other allocation events.
            </returns>
        </member>
        <member name="T:ReactNative.Chakra.JavaScriptMemoryEventType">
            <summary>
                Allocation callback event type.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptMemoryEventType.Allocate">
            <summary>
                Indicates a request for memory allocation.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptMemoryEventType.Free">
            <summary>
                Indicates a memory freeing event.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptMemoryEventType.Failure">
            <summary>
                Indicates a failed allocation event.
            </summary>
        </member>
        <member name="T:ReactNative.Chakra.JavaScriptNativeFunction">
            <summary>
                A function callback.
            </summary>
            <param name="callee">
                A <c>Function</c> object that represents the function being invoked.
            </param>
            <param name="isConstructCall">Indicates whether this is a regular call or a 'new' call.</param>
            <param name="arguments">The arguments to the call.</param>
            <param name="argumentCount">The number of arguments.</param>
            <param name="callbackData">Callback data, if any.</param>
            <returns>The result of the call, if any.</returns>
        </member>
        <member name="T:ReactNative.Chakra.JavaScriptObjectFinalizeCallback">
            <summary>
                A finalization callback.
            </summary>
            <param name="data">
                The external data that was passed in when creating the object being finalized.
            </param>
        </member>
        <member name="T:ReactNative.Chakra.JavaScriptPropertyId">
            <summary>
                A property identifier.
            </summary>
            <remarks>
                Property identifiers are used to refer to properties of JavaScript objects instead of using
                strings.
            </remarks>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptPropertyId.id">
            <summary>
            The id.
            </summary>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptPropertyId.#ctor(System.IntPtr)">
            <summary>
                Initializes a new instance of the <see cref="T:ReactNative.Chakra.JavaScriptPropertyId"/> struct. 
            </summary>
            <param name="id">The ID.</param>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptPropertyId.Invalid">
            <summary>
                Gets an invalid ID.
            </summary>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptPropertyId.Name">
            <summary>
                Gets the name associated with the property ID.
            </summary>
            <remarks>
                <para>
                Requires an active script context.
                </para>
            </remarks>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptPropertyId.FromString(System.String)">
            <summary>
                Gets the property ID associated with the name. 
            </summary>
            <remarks>
                <para>
                Property IDs are specific to a context and cannot be used across contexts.
                </para>
                <para>
                Requires an active script context.
                </para>
            </remarks>
            <param name="name">
                The name of the property ID to get or create. The name may consist of only digits.
            </param>
            <returns>The property ID in this runtime for the given name.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptPropertyId.op_Equality(ReactNative.Chakra.JavaScriptPropertyId,ReactNative.Chakra.JavaScriptPropertyId)">
            <summary>
                The equality operator for property IDs.
            </summary>
            <param name="left">The first property ID to compare.</param>
            <param name="right">The second property ID to compare.</param>
            <returns>Whether the two property IDs are the same.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptPropertyId.op_Inequality(ReactNative.Chakra.JavaScriptPropertyId,ReactNative.Chakra.JavaScriptPropertyId)">
            <summary>
                The inequality operator for property IDs.
            </summary>
            <param name="left">The first property ID to compare.</param>
            <param name="right">The second property ID to compare.</param>
            <returns>Whether the two property IDs are not the same.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptPropertyId.Equals(ReactNative.Chakra.JavaScriptPropertyId)">
            <summary>
                Checks for equality between property IDs.
            </summary>
            <param name="other">The other property ID to compare.</param>
            <returns>Whether the two property IDs are the same.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptPropertyId.Equals(System.Object)">
            <summary>
                Checks for equality between property IDs.
            </summary>
            <param name="obj">The other property ID to compare.</param>
            <returns>Whether the two property IDs are the same.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptPropertyId.GetHashCode">
            <summary>
                The hash code.
            </summary>
            <returns>The hash code of the property ID.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptPropertyId.ToString">
            <summary>
                Converts the property ID to a string.
            </summary>
            <returns>The name of the property ID.</returns>
        </member>
        <member name="T:ReactNative.Chakra.JavaScriptRuntime">
            <summary>
                A Chakra runtime.
            </summary>
            <remarks>
                <para>
                Each Chakra runtime has its own independent execution engine, JIT compiler, and garbage 
                collected heap. As such, each runtime is completely isolated from other runtimes.
                </para>
                <para>
                Runtimes can be used on any thread, but only one thread can call into a runtime at any 
                time.
                </para>
                <para>
                NOTE: A JavaScriptRuntime, unlike other objects in the Chakra hosting API, is not 
                garbage collected since it contains the garbage collected heap itself. A runtime will 
                continue to exist until Dispose is called.
                </para>
            </remarks>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptRuntime.handle">
            <summary>
            The handle.
            </summary>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptRuntime.IsValid">
            <summary>
                Gets a value indicating whether the runtime is valid.
            </summary>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptRuntime.MemoryUsage">
            <summary>
                Gets the current memory usage for a runtime.
            </summary>
            <remarks>
                Memory usage can be always be retrieved, regardless of whether or not the runtime is active
                on another thread.
            </remarks>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptRuntime.MemoryLimit">
            <summary>
                Gets or sets the current memory limit for a runtime.
            </summary>
            <remarks>
                The memory limit of a runtime can be always be retrieved, regardless of whether or not the 
                runtime is active on another thread.
            </remarks>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptRuntime.Disabled">
            <summary>
                Gets or sets a value indicating whether script execution is disabled in the runtime.
            </summary>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptRuntime.Create(ReactNative.Chakra.JavaScriptRuntimeAttributes,ReactNative.Chakra.JavaScriptThreadServiceCallback)">
            <summary>
                Creates a new runtime.
            </summary>
            <param name="attributes">The attributes of the runtime to be created.</param>
            <param name="threadServiceCallback">The thread service for the runtime. Can be null.</param>
            <returns>The runtime created.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptRuntime.Create(ReactNative.Chakra.JavaScriptRuntimeAttributes)">
            <summary>
                Creates a new runtime.
            </summary>
            <param name="attributes">The attributes of the runtime to be created.</param>
            <returns>The runtime created.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptRuntime.Create">
            <summary>
                Creates a new runtime.
            </summary>
            <returns>The runtime created.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptRuntime.Dispose">
            <summary>
                Disposes a runtime.
            </summary>
            <remarks>
                Once a runtime has been disposed, all resources owned by it are invalid and cannot be used.
                If the runtime is active (i.e. it is set to be current on a particular thread), it cannot 
                be disposed.
            </remarks>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptRuntime.CollectGarbage">
            <summary>
                Performs a full garbage collection.
            </summary>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptRuntime.SetMemoryAllocationCallback(System.IntPtr,ReactNative.Chakra.JavaScriptMemoryAllocationCallback)">
            <summary>
                Sets a memory allocation callback for specified runtime
            </summary>
            <remarks>
                <para>
                Registering a memory allocation callback will cause the runtime to call back to the host 
                whenever it acquires memory from, or releases memory to, the OS. The callback routine is
                called before the runtime memory manager allocates a block of memory. The allocation will
                be rejected if the callback returns false. The runtime memory manager will also invoke the
                callback routine after freeing a block of memory, as well as after allocation failures. 
                </para>
                <para>
                The callback is invoked on the current runtime execution thread, therefore execution is 
                blocked until the callback completes.
                </para>
                <para>
                The return value of the callback is not stored; previously rejected allocations will not
                prevent the runtime from invoking the callback again later for new memory allocations.
                </para>
            </remarks>
            <param name="callbackState">
                User provided state that will be passed back to the callback.
            </param>
            <param name="allocationCallback">
                Memory allocation callback to be called for memory allocation events.
            </param>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptRuntime.SetBeforeCollectCallback(System.IntPtr,ReactNative.Chakra.JavaScriptBeforeCollectCallback)">
            <summary>
                Sets a callback function that is called by the runtime before garbage collection.
            </summary>
            <remarks>
                <para>
                The callback is invoked on the current runtime execution thread, therefore execution is 
                blocked until the callback completes.
                </para>
                <para>
                The callback can be used by hosts to prepare for garbage collection. For example, by 
                releasing unnecessary references on Chakra objects.
                </para>
            </remarks>
            <param name="callbackState">
                User provided state that will be passed back to the callback.
            </param>
            <param name="beforeCollectCallback">The callback function being set.</param>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptRuntime.CreateContext">
            <summary>
                Creates a debug script context for running scripts.
            </summary>
            <remarks>
                Each script context has its own global object that is isolated from all other script 
                contexts.
            </remarks>
            <returns>The created script context.</returns>
        </member>
        <member name="T:ReactNative.Chakra.JavaScriptRuntimeAttributes">
            <summary>
                Attributes of a runtime.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptRuntimeAttributes.None">
            <summary>
                No special attributes.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptRuntimeAttributes.DisableBackgroundWork">
            <summary>
                The runtime will not do any work (such as garbage collection) on background threads.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptRuntimeAttributes.AllowScriptInterrupt">
            <summary>
                The runtime should support reliable script interruption. This increases the number of
                places where the runtime will check for a script interrupt request at the cost of a
                small amount of runtime performance.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptRuntimeAttributes.EnableIdleProcessing">
            <summary>
                Host will call Idle, so enable idle processing. Otherwise, the runtime will manage
                memory slightly more aggressively.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptRuntimeAttributes.DisableNativeCodeGeneration">
            <summary>
                Runtime will not generate native code.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptRuntimeAttributes.DisableEval">
            <summary>
                Using Eval or Function constructor will throw an exception.
            </summary>
        </member>
        <member name="T:ReactNative.Chakra.JavaScriptRuntimeVersion">
            <summary>
                Version of the runtime.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptRuntimeVersion.Version10">
            <summary>
                Create runtime with IE10 version.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptRuntimeVersion.Version11">
            <summary>
                Create runtime with IE11 version.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptRuntimeVersion.VersionEdge">
            <summary>
                Create runtime with highest version present on the machine at runtime.
            </summary>
        </member>
        <member name="T:ReactNative.Chakra.JavaScriptScriptException">
            <summary>
                A script exception.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptScriptException.error">
            <summary>
            The error.
            </summary>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptScriptException.#ctor(ReactNative.Chakra.JavaScriptErrorCode,ReactNative.Chakra.JavaScriptValue)">
            <summary>
                Initializes a new instance of the <see cref="T:ReactNative.Chakra.JavaScriptScriptException"/> class. 
            </summary>
            <param name="code">The error code returned.</param>
            <param name="error">The JavaScript error object.</param>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptScriptException.#ctor(ReactNative.Chakra.JavaScriptErrorCode,ReactNative.Chakra.JavaScriptValue,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:ReactNative.Chakra.JavaScriptScriptException"/> class. 
            </summary>
            <param name="code">The error code returned.</param>
            <param name="error">The JavaScript error object.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptScriptException.Error">
            <summary>
                Gets a JavaScript object representing the script error.
            </summary>
        </member>
        <member name="T:ReactNative.Chakra.JavaScriptSourceContext">
            <summary>
                A cookie that identifies a script for debugging purposes.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptSourceContext.context">
            <summary>
            The context.
            </summary>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptSourceContext.#ctor(System.IntPtr)">
            <summary>
                Initializes a new instance of the <see cref="T:ReactNative.Chakra.JavaScriptSourceContext"/> struct.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptSourceContext.None">
            <summary>
                Gets an empty source context.
            </summary>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptSourceContext.op_Equality(ReactNative.Chakra.JavaScriptSourceContext,ReactNative.Chakra.JavaScriptSourceContext)">
            <summary>
                The equality operator for source contexts.
            </summary>
            <param name="left">The first source context to compare.</param>
            <param name="right">The second source context to compare.</param>
            <returns>Whether the two source contexts are the same.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptSourceContext.op_Inequality(ReactNative.Chakra.JavaScriptSourceContext,ReactNative.Chakra.JavaScriptSourceContext)">
            <summary>
                The inequality operator for source contexts.
            </summary>
            <param name="left">The first source context to compare.</param>
            <param name="right">The second source context to compare.</param>
            <returns>Whether the two source contexts are not the same.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptSourceContext.op_Subtraction(ReactNative.Chakra.JavaScriptSourceContext,System.Int32)">
            <summary>
                Subtracts an offset from the value of the source context.
            </summary>
            <param name="context">The source context to subtract the offset from.</param>
            <param name="offset">The offset to subtract.</param>
            <returns>A new source context that reflects the subtraction of the offset from the context.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptSourceContext.Subtract(ReactNative.Chakra.JavaScriptSourceContext,System.Int32)">
            <summary>
                Subtracts an offset from the value of the source context.
            </summary>
            <param name="left">The source context to subtract the offset from.</param>
            <param name="right">The offset to subtract.</param>
            <returns>A new source context that reflects the subtraction of the offset from the context.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptSourceContext.op_Decrement(ReactNative.Chakra.JavaScriptSourceContext)">
            <summary>
                Decrements the value of the source context.
            </summary>
            <param name="context">The source context to decrement.</param>
            <returns>A new source context that reflects the decrementing of the context.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptSourceContext.Decrement(ReactNative.Chakra.JavaScriptSourceContext)">
            <summary>
                Decrements the value of the source context.
            </summary>
            <param name="left">The source context to decrement.</param>
            <returns>A new source context that reflects the decrementing of the context.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptSourceContext.op_Addition(ReactNative.Chakra.JavaScriptSourceContext,System.Int32)">
            <summary>
                Adds an offset from the value of the source context.
            </summary>
            <param name="context">The source context to add the offset to.</param>
            <param name="offset">The offset to add.</param>
            <returns>A new source context that reflects the addition of the offset to the context.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptSourceContext.Add(ReactNative.Chakra.JavaScriptSourceContext,System.Int32)">
            <summary>
                Adds an offset from the value of the source context.
            </summary>
            <param name="left">The source context to add the offset to.</param>
            <param name="right">The offset to add.</param>
            <returns>A new source context that reflects the addition of the offset to the context.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptSourceContext.op_Increment(ReactNative.Chakra.JavaScriptSourceContext)">
            <summary>
                Increments the value of the source context.
            </summary>
            <param name="context">The source context to increment.</param>
            <returns>A new source context that reflects the incrementing of the context.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptSourceContext.Increment(ReactNative.Chakra.JavaScriptSourceContext)">
            <summary>
                Increments the value of the source context.
            </summary>
            <param name="left">The source context to increment.</param>
            <returns>A new source context that reflects the incrementing of the context.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptSourceContext.FromIntPtr(System.IntPtr)">
            <summary>
                Creates a new source context. 
            </summary>
            <param name="cookie">
                The cookie for the source context.
            </param>
            <returns>The new source context.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptSourceContext.Equals(ReactNative.Chakra.JavaScriptSourceContext)">
            <summary>
                Checks for equality between source contexts.
            </summary>
            <param name="other">The other source context to compare.</param>
            <returns>Whether the two source contexts are the same.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptSourceContext.Equals(System.Object)">
            <summary>
                Checks for equality between source contexts.
            </summary>
            <param name="obj">The other source context to compare.</param>
            <returns>Whether the two source contexts are the same.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptSourceContext.GetHashCode">
            <summary>
                The hash code.
            </summary>
            <returns>The hash code of the source context.</returns>
        </member>
        <member name="T:ReactNative.Chakra.JavaScriptThreadServiceCallback">
            <summary>
                A thread service callback.
            </summary>
            <remarks>
                The host can specify a background thread service when creating a runtime. If 
                specified, then background work items will be passed to the host using this callback. The
                host is expected to either begin executing the background work item immediately and return
                true or return false and the runtime will handle the work item in-thread.
            </remarks>
            <param name="callbackFunction">The callback for the background work item.</param>
            <param name="callbackData">The data argument to be passed to the callback.</param>
            <returns>Whether the thread service will execute the callback.</returns>
        </member>
        <member name="T:ReactNative.Chakra.JavaScriptUsageException">
            <summary>
                An API usage exception occurred.
            </summary>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptUsageException.#ctor(ReactNative.Chakra.JavaScriptErrorCode)">
            <summary>
                Initializes a new instance of the <see cref="T:ReactNative.Chakra.JavaScriptUsageException"/> class. 
            </summary>
            <param name="code">The error code returned.</param>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptUsageException.#ctor(ReactNative.Chakra.JavaScriptErrorCode,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:ReactNative.Chakra.JavaScriptUsageException"/> class. 
            </summary>
            <param name="code">The error code returned.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="T:ReactNative.Chakra.JavaScriptValue">
            <summary>
                A JavaScript value.
            </summary>
            <remarks>
                A JavaScript value is one of the following types of values: Undefined, Null, Boolean, 
                String, Number, or Object.
            </remarks>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptValue.reference">
            <summary>
            The reference.
            </summary>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.#ctor(System.IntPtr)">
            <summary>
                Initializes a new instance of the <see cref="T:ReactNative.Chakra.JavaScriptValue"/> struct.
            </summary>
            <param name="reference">The reference.</param>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptValue.Invalid">
            <summary>
                Gets an invalid value.
            </summary>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptValue.Undefined">
            <summary>
                Gets the value of <c>undefined</c> in the current script context.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptValue.Null">
            <summary>
                Gets the value of <c>null</c> in the current script context.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptValue.True">
            <summary>
                Gets the value of <c>true</c> in the current script context.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptValue.False">
            <summary>
                Gets the value of <c>false</c> in the current script context.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptValue.GlobalObject">
            <summary>
                Gets the global object in the current script context.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptValue.IsValid">
            <summary>
                Gets a value indicating whether the value is valid.
            </summary>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptValue.ValueType">
            <summary>
                Gets the JavaScript type of the value.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <returns>The type of the value.</returns>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptValue.StringLength">
            <summary>
                Gets the length of a <c>String</c> value.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <returns>The length of the string.</returns>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptValue.Prototype">
            <summary>
                Gets or sets the prototype of an object.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptValue.IsExtensionAllowed">
            <summary>
                Gets a value indicating whether an object is extensible or not.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptValue.HasExternalData">
            <summary>
                Gets a value indicating whether an object is an external object.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
        </member>
        <member name="P:ReactNative.Chakra.JavaScriptValue.ExternalData">
            <summary>
                Gets or sets the data in an external object.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.FromBoolean(System.Boolean)">
            <summary>
                Creates a <c>Boolean</c> value from a <c>bool</c> value.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.FromDouble(System.Double)">
            <summary>
                Creates a <c>Number</c> value from a <c>double</c> value.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="value">The value to be converted.</param>
            <returns>The new <c>Number</c> value.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.FromInt32(System.Int32)">
            <summary>
                Creates a <c>Number</c> value from a <c>int</c> value.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="value">The value to be converted.</param>
            <returns>The new <c>Number</c> value.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.FromString(System.String)">
            <summary>
                Creates a <c>String</c> value from a string pointer.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="value">The string  to convert to a <c>String</c> value.</param>
            <returns>The new <c>String</c> value.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.FromObject(System.Object)">
            <summary>
                Creates a JavaScript value that is a projection of the passed in object.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="value">An object to be projected.</param>
            <returns>A JavaScript value that is a projection of the object.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.CreateObject">
            <summary>
                Creates a new <c>Object</c>.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <returns>The new <c>Object</c>.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.CreateExternalObject(System.IntPtr,ReactNative.Chakra.JavaScriptObjectFinalizeCallback)">
            <summary>
                Creates a new <c>Object</c> that stores some external data.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="data">External data that the object will represent. May be null.</param>
            <param name="finalizer">
                A callback for when the object is finalized. May be null.
            </param>
            <returns>The new <c>Object</c>.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.CreateFunction(ReactNative.Chakra.JavaScriptNativeFunction)">
            <summary>
                Creates a new JavaScript function.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="function">The method to call when the function is invoked.</param>
            <returns>The new function object.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.CreateFunction(ReactNative.Chakra.JavaScriptNativeFunction,System.IntPtr)">
            <summary>
                Creates a new JavaScript function.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="function">The method to call when the function is invoked.</param>
            <param name="callbackData">Data to be provided to all function callbacks.</param>
            <returns>The new function object.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.CreateArray(System.UInt32)">
            <summary>
                Creates a JavaScript array object.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="length">The initial length of the array.</param>
            <returns>The new array object.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.CreateError(ReactNative.Chakra.JavaScriptValue)">
            <summary>
                Creates a new JavaScript error object
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="message">Message for the error object.</param>
            <returns>The new error object.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.CreateRangeError(ReactNative.Chakra.JavaScriptValue)">
            <summary>
                Creates a new JavaScript RangeError error object
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="message">Message for the error object.</param>
            <returns>The new error object.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.CreateReferenceError(ReactNative.Chakra.JavaScriptValue)">
            <summary>
                Creates a new JavaScript ReferenceError error object
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="message">Message for the error object.</param>
            <returns>The new error object.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.CreateSyntaxError(ReactNative.Chakra.JavaScriptValue)">
            <summary>
                Creates a new JavaScript SyntaxError error object
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="message">Message for the error object.</param>
            <returns>The new error object.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.CreateTypeError(ReactNative.Chakra.JavaScriptValue)">
            <summary>
                Creates a new JavaScript TypeError error object
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="message">Message for the error object.</param>
            <returns>The new error object.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.CreateUriError(ReactNative.Chakra.JavaScriptValue)">
            <summary>
                Creates a new JavaScript URIError error object
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="message">Message for the error object.</param>
            <returns>The new error object.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.AddRef">
            <summary>
                Adds a reference to the object.
            </summary>
            <remarks>
                This only needs to be called on objects that are not going to be stored somewhere on 
                the stack. Calling AddRef ensures that the JavaScript object the value refers to will not be freed 
                until Release is called
            </remarks>
            <returns>The object's new reference count.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.Release">
            <summary>
                Releases a reference to the object.
            </summary>
            <remarks>
                Removes a reference that was created by AddRef.
            </remarks>
            <returns>The object's new reference count.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.ToBoolean">
            <summary>
                Retrieves the <c>bool</c> value of a <c>Boolean</c> value.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <returns>The converted value.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.ToDouble">
            <summary>
                Retrieves the <c>double</c> value of a <c>Number</c> value.
            </summary>
            <remarks>
                <para>
                This function retrieves the value of a Number value. It will fail with 
                <c>InvalidArgument</c> if the type of the value is not <c>Number</c>.
                </para>
                <para>
                Requires an active script context.
                </para>
            </remarks>
            <returns>The <c>double</c> value.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.ToString">
            <summary>
                Retrieves the string pointer of a <c>String</c> value.
            </summary>
            <remarks>
                <para>
                This function retrieves the string pointer of a <c>String</c> value. It will fail with 
                <c>InvalidArgument</c> if the type of the value is not <c>String</c>.
                </para>
                <para>
                Requires an active script context.
                </para>
            </remarks>
            <returns>The string.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.ToObject">
            <summary>
                Retrieves the object representation of an <c>Object</c> value.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <returns>The object representation of the value.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.ConvertToBoolean">
            <summary>
                Converts the value to <c>Boolean</c> using regular JavaScript semantics.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <returns>The converted value.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.ConvertToNumber">
            <summary>
                Converts the value to <c>Number</c> using regular JavaScript semantics.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <returns>The converted value.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.ConvertToString">
            <summary>
                Converts the value to <c>String</c> using regular JavaScript semantics.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <returns>The converted value.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.ConvertToObject">
            <summary>
                Converts the value to <c>Object</c> using regular JavaScript semantics.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <returns>The converted value.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.PreventExtension">
            <summary>
                Sets an object to not be extensible.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.GetOwnPropertyDescriptor(ReactNative.Chakra.JavaScriptPropertyId)">
            <summary>
                Gets a property descriptor for an object's own property.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="propertyId">The ID of the property.</param>
            <returns>The property descriptor.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.GetOwnPropertyNames">
            <summary>
                Gets the list of all properties on the object.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <returns>An array of property names.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.HasProperty(ReactNative.Chakra.JavaScriptPropertyId)">
            <summary>
                Determines whether an object has a property.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="propertyId">The ID of the property.</param>
            <returns>Whether the object (or a prototype) has the property.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.GetProperty(ReactNative.Chakra.JavaScriptPropertyId)">
            <summary>
                Gets an object's property.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="id">The ID of the property.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.SetProperty(ReactNative.Chakra.JavaScriptPropertyId,ReactNative.Chakra.JavaScriptValue,System.Boolean)">
            <summary>
                Sets an object's property.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="id">The ID of the property.</param>
            <param name="value">The new value of the property.</param>
            <param name="useStrictRules">The property set should follow strict mode rules.</param>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.DeleteProperty(ReactNative.Chakra.JavaScriptPropertyId,System.Boolean)">
            <summary>
                Deletes an object's property.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="propertyId">The ID of the property.</param>
            <param name="useStrictRules">The property set should follow strict mode rules.</param>
            <returns>Whether the property was deleted.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.DefineProperty(ReactNative.Chakra.JavaScriptPropertyId,ReactNative.Chakra.JavaScriptValue)">
            <summary>
                Defines a new object's own property from a property descriptor.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="propertyId">The ID of the property.</param>
            <param name="propertyDescriptor">The property descriptor.</param>
            <returns>Whether the property was defined.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.HasIndexedProperty(ReactNative.Chakra.JavaScriptValue)">
            <summary>
                Test if an object has a value at the specified index.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="index">The index to test.</param>
            <returns>Whether the object has an value at the specified index.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.GetIndexedProperty(ReactNative.Chakra.JavaScriptValue)">
            <summary>
                Retrieve the value at the specified index of an object.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="index">The index to retrieve.</param>
            <returns>The retrieved value.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.SetIndexedProperty(ReactNative.Chakra.JavaScriptValue,ReactNative.Chakra.JavaScriptValue)">
            <summary>
                Set the value at the specified index of an object.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="index">The index to set.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.DeleteIndexedProperty(ReactNative.Chakra.JavaScriptValue)">
            <summary>
                Delete the value at the specified index of an object.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="index">The index to delete.</param>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.Equals(ReactNative.Chakra.JavaScriptValue)">
            <summary>
                Compare two JavaScript values for equality.
            </summary>
            <remarks>
                <para>
                This function is equivalent to the "==" operator in JavaScript.
                </para>
                <para>
                Requires an active script context.
                </para>
            </remarks>
            <param name="other">The object to compare.</param>
            <returns>Whether the values are equal.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.StrictEquals(ReactNative.Chakra.JavaScriptValue)">
            <summary>
                Compare two JavaScript values for strict equality.
            </summary>
            <remarks>
                <para>
                This function is equivalent to the "===" operator in JavaScript.
                </para>
                <para>
                Requires an active script context.
                </para>
            </remarks>
            <param name="other">The object to compare.</param>
            <returns>Whether the values are strictly equal.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.CallFunction(ReactNative.Chakra.JavaScriptValue[])">
            <summary>
                Invokes a function.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="arguments">The arguments to the call.</param>
            <returns>The <c>Value</c> returned from the function invocation, if any.</returns>
        </member>
        <member name="M:ReactNative.Chakra.JavaScriptValue.ConstructObject(ReactNative.Chakra.JavaScriptValue[])">
            <summary>
                Invokes a function as a constructor.
            </summary>
            <remarks>
                Requires an active script context.
            </remarks>
            <param name="arguments">The arguments to the call.</param>
            <returns>The <c>Value</c> returned from the function invocation.</returns>
        </member>
        <member name="T:ReactNative.Chakra.JavaScriptValueType">
            <summary>
                The JavaScript type of a JavaScriptValue.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptValueType.Undefined">
            <summary>
                The value is the <c>undefined</c> value.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptValueType.Null">
            <summary>
                The value is the <c>null</c> value.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptValueType.Number">
            <summary>
                The value is a JavaScript number value.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptValueType.String">
            <summary>
                The value is a JavaScript string value.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptValueType.Boolean">
            <summary>
                The value is a JavaScript Boolean value.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptValueType.Object">
            <summary>
                The value is a JavaScript object value.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptValueType.Function">
            <summary>
                The value is a JavaScript function object value.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptValueType.Error">
            <summary>
                The value is a JavaScript error object value.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptValueType.Array">
            <summary>
                The value is a JavaScript array object value.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptValueType.Symbol">
            <summary>
                The value is a JavaScript symbol value.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptValueType.ArrayBuffer">
            <summary>
                The value is a JavaScript ArrayBuffer object value.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptValueType.TypedArray">
            <summary>
                The value is a JavaScript typed array object value.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.JavaScriptValueType.DataView">
            <summary>
                The value is a JavaScript DataView object value.
            </summary>
        </member>
        <member name="T:ReactNative.Chakra.Native">
            <summary>
                Native interfaces.
            </summary>
        </member>
        <member name="T:ReactNative.Chakra.Native.ProfilerEventMask">
            <summary>
                Event mask for profiling.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.Native.ProfilerEventMask.TraceScriptFunctionCall">
            <summary>
                Trace calls to script functions.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.Native.ProfilerEventMask.TraceNativeFunctionCall">
            <summary>
                Trace calls to built-in functions.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.Native.ProfilerEventMask.TraceDomFunctionCall">
            <summary>
                Trace calls to DOM methods.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.Native.ProfilerEventMask.TraceAll">
            <summary>
                Trace all calls except DOM methods.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.Native.ProfilerEventMask.TraceAllWithDom">
            <summary>
                Trace all calls.
            </summary>
        </member>
        <member name="T:ReactNative.Chakra.Native.ProfilerScriptType">
            <summary>
                Profiled script type.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.Native.ProfilerScriptType.User">
            <summary>
                A user script.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.Native.ProfilerScriptType.Dynamic">
            <summary>
                A dynamic script.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.Native.ProfilerScriptType.Native">
            <summary>
                A native script.
            </summary>
        </member>
        <member name="F:ReactNative.Chakra.Native.ProfilerScriptType.Dom">
            <summary>
                A DOM-related script.
            </summary>
        </member>
        <member name="T:ReactNative.Chakra.Native.IProcessDebugManager32">
            <summary>
                IProcessDebugManager32 COM interface.
            </summary>
        </member>
        <member name="M:ReactNative.Chakra.Native.IProcessDebugManager32.CreateApplication(ReactNative.Chakra.Native.IDebugApplication32@)">
            <summary>
                Creates a new debug application.
            </summary>
            <param name="debugApplication">The new debug application.</param>
        </member>
        <member name="M:ReactNative.Chakra.Native.IProcessDebugManager32.GetDefaultApplication(ReactNative.Chakra.Native.IDebugApplication32@)">
            <summary>
                Gets the default debug application.
            </summary>
            <param name="debugApplication">The default debug application.</param>
        </member>
        <member name="M:ReactNative.Chakra.Native.IProcessDebugManager32.AddApplication(ReactNative.Chakra.Native.IDebugApplication32,System.UInt32@)">
            <summary>
                Adds a new debug application.
            </summary>
            <param name="debugApplication">The new debug application.</param>
            <param name="cookie">An engine-defined cookie.</param>
        </member>
        <member name="M:ReactNative.Chakra.Native.IProcessDebugManager32.RemoveApplication(System.UInt32)">
            <summary>
                Removes a debug application.
            </summary>
            <param name="cookie">The cookie of the debug application to remove.</param>
        </member>
        <member name="M:ReactNative.Chakra.Native.IProcessDebugManager32.CreateDebugDocumentHelper(System.Object,ReactNative.Chakra.Native.IDebugDocumentHelper32@)">
            <summary>
                Creates a debug document helper.
            </summary>
            <param name="outerUnknown">The outer unknown.</param>
            <param name="helper">The new debug document helper.</param>
        </member>
        <member name="T:ReactNative.Chakra.Native.IProcessDebugManager64">
            <summary>
                IProcessDebugManager64 COM interface.
            </summary>
        </member>
        <member name="M:ReactNative.Chakra.Native.IProcessDebugManager64.CreateApplication(ReactNative.Chakra.Native.IDebugApplication64@)">
            <summary>
                Creates a new debug application.
            </summary>
            <param name="debugApplication">The new debug application.</param>
        </member>
        <member name="M:ReactNative.Chakra.Native.IProcessDebugManager64.GetDefaultApplication(ReactNative.Chakra.Native.IDebugApplication64@)">
            <summary>
                Gets the default debug application.
            </summary>
            <param name="debugApplication">The default debug application.</param>
        </member>
        <member name="M:ReactNative.Chakra.Native.IProcessDebugManager64.AddApplication(ReactNative.Chakra.Native.IDebugApplication64,System.UInt32@)">
            <summary>
                Adds a new debug application.
            </summary>
            <param name="debugApplication">The new debug application.</param>
            <param name="cookie">An engine-defined cookie.</param>
        </member>
        <member name="M:ReactNative.Chakra.Native.IProcessDebugManager64.RemoveApplication(System.UInt32)">
            <summary>
                Removes a debug application.
            </summary>
            <param name="cookie">The cookie of the debug application to remove.</param>
        </member>
        <member name="M:ReactNative.Chakra.Native.IProcessDebugManager64.CreateDebugDocumentHelper(System.Object,ReactNative.Chakra.Native.IDebugDocumentHelper64@)">
            <summary>
                Creates a debug document helper.
            </summary>
            <param name="outerUnknown">The outer unknown.</param>
            <param name="helper">The new debug document helper.</param>
        </member>
        <member name="T:ReactNative.Chakra.Native.IDebugApplication32">
            <summary>
                IDebugApplication32 COM interface.
            </summary>
        </member>
        <member name="T:ReactNative.Chakra.Native.IDebugApplication64">
            <summary>
                IDebugApplication64 COM interface.
            </summary>
        </member>
        <member name="T:ReactNative.Chakra.Native.IDebugDocumentHelper32">
            <summary>
                IDebugDocumentHelper32 COM interface.
            </summary>
        </member>
        <member name="T:ReactNative.Chakra.Native.IDebugDocumentHelper64">
            <summary>
                IDebugDocumentHelper64 COM interface.
            </summary>
        </member>
        <member name="T:ReactNative.Chakra.Native.IActiveScriptProfilerCallback">
            <summary>
                IActiveScriptProfilerCallback COM interface.
            </summary>
        </member>
        <member name="M:ReactNative.Chakra.Native.IActiveScriptProfilerCallback.Initialize(System.UInt32)">
            <summary>
                Called when the profile is started.
            </summary>
            <param name="context">The context provided when profiling was started.</param>
        </member>
        <member name="M:ReactNative.Chakra.Native.IActiveScriptProfilerCallback.Shutdown(System.UInt32)">
            <summary>
                Called when profiling is stopped.
            </summary>
            <param name="reason">The reason code provided when profiling was stopped.</param>
        </member>
        <member name="M:ReactNative.Chakra.Native.IActiveScriptProfilerCallback.ScriptCompiled(System.Int32,ReactNative.Chakra.Native.ProfilerScriptType,System.IntPtr)">
            <summary>
                Called when a script is compiled.
            </summary>
            <param name="scriptId">The ID of the script.</param>
            <param name="type">The type of the script.</param>
            <param name="debugDocumentContext">The debug document context, if any.</param>
        </member>
        <member name="M:ReactNative.Chakra.Native.IActiveScriptProfilerCallback.FunctionCompiled(System.Int32,System.Int32,System.String,System.String,System.IntPtr)">
            <summary>
                Called when a function is compiled.
            </summary>
            <param name="functionId">The ID of the function.</param>
            <param name="scriptId">The ID of the script.</param>
            <param name="functionName">The name of the function.</param>
            <param name="functionNameHint">The function name hint.</param>
            <param name="debugDocumentContext">The debug document context, if any.</param>
        </member>
        <member name="M:ReactNative.Chakra.Native.IActiveScriptProfilerCallback.OnFunctionEnter(System.Int32,System.Int32)">
            <summary>
                Called when a function is entered.
            </summary>
            <param name="scriptId">The ID of the script.</param>
            <param name="functionId">The ID of the function.</param>
        </member>
        <member name="M:ReactNative.Chakra.Native.IActiveScriptProfilerCallback.OnFunctionExit(System.Int32,System.Int32)">
            <summary>
                Called when a function is exited.
            </summary>
            <param name="scriptId">The ID of the script.</param>
            <param name="functionId">The ID of the function.</param>
        </member>
        <member name="T:ReactNative.Chakra.Native.IActiveScriptProfilerCallback2">
            <summary>
                IActiveScriptProfilerCallback2 COM interface.
            </summary>
        </member>
        <member name="M:ReactNative.Chakra.Native.IActiveScriptProfilerCallback2.OnFunctionEnterByName(System.String,ReactNative.Chakra.Native.ProfilerScriptType)">
            <summary>
                Called when a function is entered by name.
            </summary>
            <param name="functionName">The name of the function.</param>
            <param name="type">The type of the function.</param>
        </member>
        <member name="M:ReactNative.Chakra.Native.IActiveScriptProfilerCallback2.OnFunctionExitByName(System.String,ReactNative.Chakra.Native.ProfilerScriptType)">
            <summary>
                Called when a function is exited by name.
            </summary>
            <param name="functionName">The name of the function.</param>
            <param name="type">The type of the function.</param>
        </member>
        <member name="T:ReactNative.Chakra.Native.IActiveScriptProfilerHeapEnum">
            <summary>
                IActiveScriptProfilerHeapEnum COM interface.
            </summary>
        </member>
        <member name="M:ReactNative.Chakra.Native.ThrowIfError(ReactNative.Chakra.JavaScriptErrorCode)">
            <summary>
            Throws if a native method returns an error code.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="T:ReactNative.Chakra.Native.ProcessDebugManager">
            <summary>
                ProcessDebugManager COM interface.
            </summary>
        </member>
        <member name="T:ReactNative.Collections.HeapBasedPriorityQueue`1">
            <summary>
            Heap based priority queue. For precise algorithm please see wikipedia.
            Not thread safe.
            </summary>
            <typeparam name="T">Element type</typeparam>
        </member>
        <member name="F:ReactNative.Collections.HeapBasedPriorityQueue`1._count">
            <summary>
            Count for introducing priority of equal elements.
            </summary>
        </member>
        <member name="F:ReactNative.Collections.HeapBasedPriorityQueue`1._items">
            <summary>
            Array of indexed items.
            </summary>
        </member>
        <member name="F:ReactNative.Collections.HeapBasedPriorityQueue`1._size">
            <summary>
            The current size of the queue.
            </summary>
        </member>
        <member name="F:ReactNative.Collections.HeapBasedPriorityQueue`1._comparer">
            <summary>
            The comparer.
            </summary>
        </member>
        <member name="M:ReactNative.Collections.HeapBasedPriorityQueue`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ReactNative.Collections.HeapBasedPriorityQueue`1"/> class.
            </summary>
        </member>
        <member name="M:ReactNative.Collections.HeapBasedPriorityQueue`1.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ReactNative.Collections.HeapBasedPriorityQueue`1"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
            <param name="comparer">Compared used to compare elements in the queue.</param>
        </member>
        <member name="P:ReactNative.Collections.HeapBasedPriorityQueue`1.Count">
            <summary>
            Gets the count of the queue.
            </summary>
        </member>
        <member name="M:ReactNative.Collections.HeapBasedPriorityQueue`1.Peek">
            <summary>
            Peeks the element from the queue.
            </summary>
            <returns>New element.</returns>
            <exception cref="T:System.InvalidOperationException">If the method is called on an empty queue.</exception>
        </member>
        <member name="M:ReactNative.Collections.HeapBasedPriorityQueue`1.Dequeue">
            <summary>
            De-queues the element with the highest priority.
            </summary>
            <returns>Highest priority element.</returns>
        </member>
        <member name="M:ReactNative.Collections.HeapBasedPriorityQueue`1.Enqueue(`0)">
            <summary>
            Enqueues the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:ReactNative.Collections.HeapBasedPriorityQueue`1.Remove(`0)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>True if the item has been deleted. False if it does not exists.</returns>
        </member>
        <member name="M:ReactNative.Collections.HeapBasedPriorityQueue`1.Contains(`0)">
            <summary>
            Determines whether the queue [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ReactNative.Collections.HeapBasedPriorityQueue`1.IsHigherPriority(System.Int32,System.Int32)">
            <summary>
            Determines whether [is higher priority] [the specified left].
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
              <c>true</c> if [is higher priority] [the specified left]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ReactNative.Collections.HeapBasedPriorityQueue`1.Percolate(System.Int32)">
            <summary>
            Percolates the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The final index of the original element</returns>
        </member>
        <member name="M:ReactNative.Collections.HeapBasedPriorityQueue`1.Heapify(System.Int32)">
            <summary>
            Heapifies the specified index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:ReactNative.Collections.HeapBasedPriorityQueue`1.RemoveAt(System.Int32)">
            <summary>
            Removes element at the specified index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="T:ReactNative.Collections.HeapBasedPriorityQueue`1.IndexedItem">
            <summary>
            Indexed item.
            </summary>
        </member>
        <member name="P:ReactNative.Collections.HeapBasedPriorityQueue`1.IndexedItem.Value">
            <summary>
            Gets or sets the real user value.
            </summary>
        </member>
        <member name="P:ReactNative.Collections.HeapBasedPriorityQueue`1.IndexedItem.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:ReactNative.Collections.HeapBasedPriorityQueue`1.IndexedItem.Comparer">
            <summary>
            Gets or sets the comparer.
            </summary>
        </member>
        <member name="M:ReactNative.Collections.HeapBasedPriorityQueue`1.IndexedItem.CompareTo(ReactNative.Collections.HeapBasedPriorityQueue{`0}.IndexedItem)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other" /> parameter.Zero This object is equal to <paramref name="other" />. Greater than zero This object is greater than <paramref name="other" />.
            </returns>
        </member>
        <member name="T:ReactNative.Common.ReactConstants">
            <summary>
            Set of constants used.
            </summary>
        </member>
        <member name="F:ReactNative.Common.ReactConstants.Tag">
            <summary>
            Trace tag for React components.
            </summary>
        </member>
        <member name="T:ReactNative.Modules.Core.JSTimersExecution">
            <summary>
            JavaScript module for invoking timers by identifier.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.Core.JSTimersExecution.callTimers(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Calls a batch of timers with the given identifiers.
            </summary>
            <param name="timerIds">The timer identifiers.</param>
        </member>
        <member name="T:ReactNative.Modules.Core.Timing">
            <summary>
            Native module for JavaScript timer execution.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.Core.Timing.#ctor(ReactNative.Bridge.ReactContext)">
            <summary>
            Instantiates the <see cref="T:ReactNative.Modules.Core.Timing"/> module.
            </summary>
            <param name="reactContext">The React context.</param>
        </member>
        <member name="P:ReactNative.Modules.Core.Timing.Name">
            <summary>
            The name of the module.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.Core.Timing.Initialize">
            <summary>
            Initializes the module.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.Core.Timing.OnSuspend">
            <summary>
            Called when the host application suspends.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.Core.Timing.OnResume">
            <summary>
            Called when the host application resumes.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.Core.Timing.OnDestroy">
            <summary>
            Called when the host application is destroyed.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.Core.Timing.createTimer(System.Int32,System.Int32,System.Double,System.Boolean)">
            <summary>
            Creates a timer with the given properties.
            </summary>
            <param name="callbackId">The timer identifier.</param>
            <param name="duration">The duration in milliseconds.</param>
            <param name="jsSchedulingTime">
            The Unix timestamp when the timer was created.
            </param>
            <param name="repeat">
            A flag signaling if the timer should fire at intervals.
            </param>
        </member>
        <member name="M:ReactNative.Modules.Core.Timing.deleteTimer(System.Int32)">
            <summary>
            Removes a timer.
            </summary>
            <param name="timerId">The timer identifier.</param>
        </member>
        <member name="T:ReactNative.Modules.DevSupport.IDeveloperSettings">
            <summary>
            Provides access to React Native developer settings.
            </summary>
        </member>
        <member name="P:ReactNative.Modules.DevSupport.IDeveloperSettings.IsFpsDebugEnabled">
            <summary>
            Signals whether an overlay showing current FPS should be shown.
            </summary>
        </member>
        <member name="P:ReactNative.Modules.DevSupport.IDeveloperSettings.IsAnimationFpsDebugEnabled">
            <summary>
            Signals whether debug information about transitions should be displayed.
            </summary>
        </member>
        <member name="P:ReactNative.Modules.DevSupport.IDeveloperSettings.IsJavaScriptDevModeEnabled">
            <summary>
            Signals whether dev mode should be enabled in JavaScript bundles.
            </summary>
        </member>
        <member name="P:ReactNative.Modules.DevSupport.IDeveloperSettings.IsJavaScriptMinifyEnabled">
            <summary>
            Signals whether JavaScript bundle should be minified.
            </summary>
        </member>
        <member name="P:ReactNative.Modules.DevSupport.IDeveloperSettings.IsElementInspectorEnabled">
            <summary>
            Signals whether element inspector is enabled.
            </summary>
        </member>
        <member name="T:ReactNative.Modules.DevSupport.SourceCodeModule">
            <summary>
            Module that exposes the URL to the source code map (used for exception
            stack trace parsing) to JavaScript.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.DevSupport.SourceCodeModule.#ctor(System.String,System.String)">
            <summary>
            Instantiates the <see cref="T:ReactNative.Modules.DevSupport.SourceCodeModule"/>.
            </summary>
            <param name="sourceUrl">The source URL.</param>
            <param name="sourceMapUrl">The source map URL.</param>
        </member>
        <member name="P:ReactNative.Modules.DevSupport.SourceCodeModule.Name">
            <summary>
            The name of the module.
            </summary>
        </member>
        <member name="P:ReactNative.Modules.DevSupport.SourceCodeModule.Constants">
            <summary>
            The module constants.
            </summary>
        </member>
        <member name="M:ReactNative.Modules.DevSupport.SourceCodeModule.getScriptText(ReactNative.Bridge.IPromise)">
            <summary>
            Gets the script mapping URL.
            </summary>
            <param name="promise">The promise.</param>
        </member>
        <member name="T:ReactNative.Reflection.ExpressionExtensions">
            <summary>
            Helper methods for expressions.
            </summary>
        </member>
        <member name="M:ReactNative.Reflection.ExpressionExtensions.Let``2(``0,System.Func{``0,``1})">
            <summary>
            Transforms an expression into a parameter that can be used in
            multiple places in a larger expression. Particularly useful for
            declaring parameters in a <see cref="T:System.Linq.Expressions.LambdaExpression"/>.
            </summary>
            <typeparam name="TExpression">Expression type.</typeparam>
            <typeparam name="T">Result type.</typeparam>
            <param name="expression">The expression.</param>
            <param name="selector">The result selector.</param>
            <returns>The result.</returns>
        </member>
        <member name="T:ReactNative.Reflection.ReflectionHelpers">
            <summary>
            Helpers for <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
        </member>
        <member name="M:ReactNative.Reflection.ReflectionHelpers.IsAsync(System.Reflection.MethodInfo)">
            <summary>
            Checks if a method is asynchronous.
            </summary>
            <param name="methodInfo">The method.</param>
            <returns>
            <b>true</b> if the method is asynchronous, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:ReactNative.Reflection.ReflectionHelpers.InfoOf(System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Gets the <see cref="T:System.Reflection.MemberInfo"/> at the root of the expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns>The reflected member.</returns>
        </member>
        <member name="M:ReactNative.Reflection.ReflectionHelpers.InfoOf``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Gets the <see cref="T:System.Reflection.MemberInfo"/> at the root of the expression.
            </summary>
            <typeparam name="T">Type of input.</typeparam>
            <param name="expression">The expression.</param>
            <returns>The reflected member.</returns>
        </member>
        <member name="M:ReactNative.Reflection.ReflectionHelpers.InfoOf``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the <see cref="T:System.Reflection.MemberInfo"/> at the root of the expression.
            </summary>
            <typeparam name="T">Type of result.</typeparam>
            <param name="expression">The expression.</param>
            <returns>The reflected member.</returns>
        </member>
        <member name="M:ReactNative.Reflection.ReflectionHelpers.InfoOf``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the <see cref="T:System.Reflection.MemberInfo"/> at the root of the expression.
            </summary>
            <typeparam name="TArgs">Type of input.</typeparam>
            <typeparam name="T">Type of result.</typeparam>
            <param name="expression">The expression.</param>
            <returns>The reflected member.</returns>
        </member>
        <member name="M:ReactNative.Reflection.ReflectionHelpers.InfoOf(System.Linq.Expressions.Expression)">
            <summary>
            Gets the <see cref="T:System.Reflection.MemberInfo"/> at the root of the expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns>The reflected member.</returns>
        </member>
        <member name="T:ReactNative.UIManager.Annotations.ReactPropAttribute">
            <summary>
            An annotation for properties of native vies that should be exposed to
            JavaScript.
            </summary>
            <remarks>
            Each annotated method should return <see cref="T:System.Void"/>.
            
            In cases when the property has been removed from the corresponding 
            React component, the annotated setter will be called and a default
            value will be provided as a value parameter. Default values can be
            customized using, e.g., <see cref="P:ReactNative.UIManager.Annotations.ReactPropBaseAttribute.DefaultInt32"/>. 
            In all other cases where the type is not a primitive, 
            <code>null</code> will be provided as a default.
            </remarks>
        </member>
        <member name="M:ReactNative.UIManager.Annotations.ReactPropAttribute.#ctor(System.String)">
            <summary>
            Instantiates the <see cref="T:ReactNative.UIManager.Annotations.ReactPropAttribute"/>.
            </summary>
            <param name="name">The property name.</param>
        </member>
        <member name="P:ReactNative.UIManager.Annotations.ReactPropAttribute.Name">
            <summary>
            Name of the property exposed to JavaScript.
            </summary>
        </member>
        <member name="T:ReactNative.UIManager.Annotations.ReactPropBaseAttribute">
            <summary>
            A base class for common functionality across <see cref="T:ReactNative.UIManager.Annotations.ReactPropAttribute"/>
            and <see cref="T:ReactNative.UIManager.Annotations.ReactPropGroupAttribute"/>.
            </summary>
        </member>
        <member name="F:ReactNative.UIManager.Annotations.ReactPropBaseAttribute.UseDefaultType">
            <summary>
            A type handle that signals to use the default type.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.Annotations.ReactPropBaseAttribute.CustomType">
            <summary>
            The custom type name that should be sent to JavaScript.
            </summary>
            <remarks>
            In most cases, this should not be set. The custom type is meant to
            be used when additional processing of the value needs to occur in
            JavaScript before sending it over the bridge.
            </remarks>
        </member>
        <member name="P:ReactNative.UIManager.Annotations.ReactPropBaseAttribute.DefaultBoolean">
            <summary>
            The default value for boolean properties.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.Annotations.ReactPropBaseAttribute.DefaultByte">
            <summary>
            The default value for byte properties.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.Annotations.ReactPropBaseAttribute.DefaultSByte">
            <summary>
            The default value for signed byte properties.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.Annotations.ReactPropBaseAttribute.DefaultDouble">
            <summary>
            The default value for double properties.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.Annotations.ReactPropBaseAttribute.DefaultSingle">
            <summary>
            The default value for float properties.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.Annotations.ReactPropBaseAttribute.DefaultInt32">
            <summary>
            The default value for integers.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.Annotations.ReactPropBaseAttribute.DefaultUInt32">
            <summary>
            The default value for unsigned integers.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.Annotations.ReactPropBaseAttribute.DefaultInt64">
            <summary>
            The default value for long integers.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.Annotations.ReactPropBaseAttribute.DefaultUInt64">
            <summary>
            The default value for unsigned long integers.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.Annotations.ReactPropBaseAttribute.DefaultInt16">
            <summary>
            The default value for short integers.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.Annotations.ReactPropBaseAttribute.DefaultUInt16">
            <summary>
            The default value for unsigned short integers.
            </summary>
        </member>
        <member name="T:ReactNative.UIManager.Annotations.ReactPropGroupAttribute">
            <summary>
            Annotates a group of properties of native views that should be exposed
            to JavaScript. It is a batched version of the 
            <see cref="T:ReactNative.UIManager.Annotations.ReactPropAttribute"/> annotation.
            </summary>
            <remarks>
            This annotation is meant to be used of similar properties. That is why
            it only supports a set of properties of the same type. A good example
            is supporting "border", where there are many variations of that
            property and each has very similar handling.
            
            Each annotated method should return <see cref="T:System.Void"/>.
            
            In cases when the property has been removed from the corresponding 
            React component, the annotated setter will be called and a default
            value will be provided as a value parameter. Default values can be
            customized using, e.g., <see cref="P:ReactNative.UIManager.Annotations.ReactPropBaseAttribute.DefaultInt32"/>.
            In all other cases, <code>null</code> will be provided as a default.
            </remarks>
        </member>
        <member name="M:ReactNative.UIManager.Annotations.ReactPropGroupAttribute.#ctor(System.String[])">
            <summary>
            Instantiates the <see cref="T:ReactNative.UIManager.Annotations.ReactPropGroupAttribute"/>.
            </summary>
            <param name="names">The property group names.</param>
        </member>
        <member name="P:ReactNative.UIManager.Annotations.ReactPropGroupAttribute.Names">
            <summary>
            The set of property group names.
            </summary>
        </member>
        <member name="T:ReactNative.UIManager.AppRegistry">
            <summary>
            The application registry.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.AppRegistry.runApplication(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Run the application.
            </summary>
            <param name="appKey">The app key.</param>
            <param name="appParameters">The app parameters.</param>
        </member>
        <member name="M:ReactNative.UIManager.AppRegistry.unmountApplicationComponentAtRootTag(System.Int32)">
            <summary>
            Unmount the application.
            </summary>
            <param name="rootTagNode">The root tag node.</param>
        </member>
        <member name="T:ReactNative.UIManager.Events.Event">
            <summary>
            A UI event that can be dispatched to JavaScript.
            </summary>
            <remarks>
            For dispatching events, <see cref="!:EventDispatcher.DispatchEvent(Event)"/>
            should be used. Once the object is passed to the <see cref="!:EventDispatcher"/>
            it should no longer be used, as <see cref="!:EventDispatcher"/> may
            decide to recycle that object (by calling <see cref="M:ReactNative.UIManager.Events.Event.Dispose"/>.
            </remarks>
        </member>
        <member name="M:ReactNative.UIManager.Events.Event.#ctor(System.Int32,System.TimeSpan)">
            <summary>
            Base constructor for <see cref="T:ReactNative.UIManager.Events.Event"/>.
            </summary>
            <param name="viewTag">The view tag.</param>
            <param name="timestamp">The event timestamp.</param>
        </member>
        <member name="P:ReactNative.UIManager.Events.Event.EventName">
            <summary>
            The name of the event as registered in JavaScript.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.Events.Event.ViewTag">
            <summary>
            The ID of the view that generated this event.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.Events.Event.Timestamp">
            <summary>
            The time at which the event happened in the 
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.Events.Event.CanCoalesce">
            <summary>
            Signals if the event can be coalesced.
            </summary>
            <remarks>
            Return false if the event can never be coalesced.
            </remarks>
        </member>
        <member name="P:ReactNative.UIManager.Events.Event.IsInitialized">
            <summary>
            Signals if the event has been initialized.
            </summary>
        </member>
        <member name="P:ReactNative.UIManager.Events.Event.CoalescingKey">
            <summary>
            A key used to determine which other events of this type this event
            can be coalesced with. For example, touch move events should only
            be coalesced within a single gesture, so a coalescing key there
            would be the unique gesture identifier.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.Events.Event.Coalesce(ReactNative.UIManager.Events.Event)">
            <summary>
            Given two events, coalesce them into a single event that will be
            sent to JavaScript instead of two separate events.
            </summary>
            <param name="otherEvent">The other event.</param>
            <returns>The coalesced event.</returns>
            <remarks>
            By default, just chooses the one that is more recent. Two events
            will only ever try to be coalesced if they have the same event
            name, view ID, and coalescing key.
            </remarks>
        </member>
        <member name="M:ReactNative.UIManager.Events.Event.Dispatch(ReactNative.UIManager.Events.RCTEventEmitter)">
            <summary>
            Dispatch this event to JavaScript using the given event emitter.
            </summary>
            <param name="eventEmitter">The event emitter.</param>
        </member>
        <member name="M:ReactNative.UIManager.Events.Event.Dispose">
            <summary>
            Disposes the event.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.Events.Event.Init(System.Int32,System.TimeSpan)">
            <summary>
            Initializes the event.
            </summary>
            <param name="viewTag">The view tag.</param>
            <param name="timestamp">The timestamp.</param>
            <remarks>
            This method must be called before the event is sent to the event
            dispatcher.
            </remarks>
        </member>
        <member name="M:ReactNative.UIManager.Events.Event.OnDispose">
            <summary>
            Called when the <see cref="!:EventDispatcher"/> is done with an 
            event, either because it was dispatched or because it was coalesced
            with another <see cref="T:ReactNative.UIManager.Events.Event"/>.
            </summary>
            <remarks>
            The derived class does not need to call this base method.
            </remarks>
        </member>
        <member name="T:ReactNative.UIManager.Events.RCTEventEmitter">
            <summary>
            JavaScript event emitter.
            </summary>
        </member>
        <member name="M:ReactNative.UIManager.Events.RCTEventEmitter.receiveEvent(System.Int32,System.String,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Receive an event.
            </summary>
            <param name="targetTag">The target tag.</param>
            <param name="eventName">The event name.</param>
            <param name="event">The event data.</param>
        </member>
        <member name="M:ReactNative.UIManager.Events.RCTEventEmitter.receiveTouches(System.String,Newtonsoft.Json.Linq.JArray,Newtonsoft.Json.Linq.JArray)">
            <summary>
            Receives touches.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="touches">The touches.</param>
            <param name="changedIndexes">The changed indices.</param>
        </member>
        <member name="T:ReactNative.UIManager.Events.TouchEventType">
            <summary>
            Touch event types that the JavaScript module <see cref="T:ReactNative.UIManager.Events.RCTEventEmitter"/>
            understands.
            </summary>
        </member>
        <member name="F:ReactNative.UIManager.Events.TouchEventType.Start">
            <summary>
            Touch start event type.
            </summary>
        </member>
        <member name="F:ReactNative.UIManager.Events.TouchEventType.End">
            <summary>
            Touch end event type.
            </summary>
        </member>
        <member name="F:ReactNative.UIManager.Events.TouchEventType.Move">
            <summary>
            Touch move event type.
            </summary>
        </member>
        <member name="F:ReactNative.UIManager.Events.TouchEventType.Cancel">
            <summary>
            Touch cancel event type.
            </summary>
        </member>
    </members>
</doc>
