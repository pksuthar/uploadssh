"use strict";
/**
 * SubscribableEvent.ts
 *
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT license.
 *
 * A simple strongly-typed pub/sub/fire eventing system.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var SubscriptionToken = /** @class */ (function () {
    function SubscriptionToken(_event, _callback) {
        this._event = _event;
        this._callback = _callback;
    }
    SubscriptionToken.prototype.unsubscribe = function () {
        this._event.unsubscribe(this._callback);
    };
    return SubscriptionToken;
}());
exports.SubscriptionToken = SubscriptionToken;
var SubscribableEvent = /** @class */ (function () {
    // By default, SubscribableEvent will fire to all subscribers regardless of any conditions.
    // If you enable allowStopPropagation, then a subscription callback can return a truthy response and it will halt further callbacks.
    function SubscribableEvent(_allowStopPropagation) {
        if (_allowStopPropagation === void 0) { _allowStopPropagation = false; }
        var _this = this;
        this._allowStopPropagation = _allowStopPropagation;
        this.fire = (function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            // Keep reference to the original readonly array. We don't want to have it change while we're firing
            var subs = _this._subscribers;
            // Execute handlers in the reverse order in which they were registered.
            for (var i = subs.length - 1; i >= 0; i--) {
                var ret = subs[i].apply(null, args);
                if (_this._allowStopPropagation && !!ret) {
                    // If the value was handled, early out.
                    return true;
                }
            }
            return false;
        });
        this._subscribers = [];
    }
    SubscribableEvent.prototype.dispose = function () {
        this._subscribers = [];
    };
    SubscribableEvent.prototype.subscribe = function (callback) {
        this._subscribers = this._subscribers.concat(callback);
        return new SubscriptionToken(this, callback);
    };
    SubscribableEvent.prototype.unsubscribe = function (callback) {
        this._subscribers = this._subscribers.filter(function (value) { return value !== callback; });
    };
    return SubscribableEvent;
}());
exports.default = SubscribableEvent;
